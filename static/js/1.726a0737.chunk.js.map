{"version":3,"sources":["Components/ArrayInputs/style.ts","Assets/Style/Constants.ts","Components/ArrayInputs/index.tsx","Components/Button/style.ts","Components/Button/index.tsx","Components/Image/cropImage.ts","Components/Image/ImgUploadButton/style.ts","Components/Image/ImgUploadButton/index.tsx","Components/Image/style.ts","Components/Image/index.tsx","Components/Radio/style.ts","Components/Radio/index.tsx","Components/Textarea/style.ts","Components/Textarea/index.tsx","Components/TextInput/style.ts","Components/TextInput/index.tsx","Utils/String.ts","Assets/Languages/index.ts","Assets/Languages/Form.ts","Views/Home/index.tsx","Views/Home/style.ts","Assets/Style/Fonts.ts"],"names":["Container","styled","div","Label","Colors","primary","background","fontBold","InputsContainer","InputContainer","Input","input","secondary","Button","button","color","ArrayInputs","label","inputs","setValue","addField","removeField","map","value","index","key","onChange","e","target","type","onClick","props","children","createImage","url","a","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getCroppedImg","imageSrc","pixelCrop","canvas","document","createElement","ctx","getContext","maxSize","Math","max","width","height","safeArea","sqrt","translate","drawImage","data","getImageData","putImageData","x","y","toDataURL","ImgUploadButton","aria-label","name","disabled","ButtonsContainer","red","ImageContainer","CropperContainer","ProfileImage","buttonLabel","buttonEditLabel","buttonRemoveLabel","buttonSelectLabel","useState","selectedImageBase64","setSelectedImageBase64","crop","setCrop","zoom","setZoom","croppedAreaPixels","setCroppedAreaPixels","onCrop","useCallback","croppedArea","onSelectImage","files","file","reader","FileReader","result","readAsDataURL","onComplete","croppedImage","console","reset","edit","firstStageButtons","secondStageButtons","onCropChange","onCropComplete","onZoomChange","aspect","alt","Fieldset","fieldset","Radio","options","option","id","checked","htmlFor","fontRegular","LabelContainer","required","ErrorContainer","Limit","span","remaining","Textarea","innerRef","errorMessage","containerStyle","isRequired","placeholder","limit","length","setLength","style","ref","TextInput","removeNonNumeric","str","replace","AllLangs","EN","BR","ES","Form","reactResumeGenerator","by","headline","contact","graduation","portfolio","competences","languages","observation","salaryExpectation","age","about","employment","actualJob","academic","submit","profilePicture","uploadFile","buttonEdit","buttonRemove","buttonSelect","language","currency","currencyOptions","View","useForm","register","handleSubmit","errors","setLanguage","setCurrency","setProfilePicture","skills","setSkills","onSubmit","log","formatAge","formatted","substr","getLanguagesOptions","useMemo","allLangsOptions","lang","push","changeSkillValue","newSkills","slice","addSkill","removeSkill","splice","Header","h1","FormContainer","form","ButtonContainer"],"mappings":"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","file":"static/js/1.726a0737.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nimport {\n  CONTAINER_MARGIN_BOTTOM,\n  INPUT_WIDTH,\n  LABEL_WIDTH,\n  INPUT_PADDING,\n} from \"Assets/Style/Constants\";\n\nimport Colors from \"Assets/Style/Colors\";\nimport { fontBold } from \"Assets/Style/Fonts\";\n\nexport const Container = styled.div`\n  display: flex;\n  margin-bottom: ${CONTAINER_MARGIN_BOTTOM};\n`;\n\nexport const Label = styled.div`\n  display: flex;\n  align-items: center;\n  font-weight: bold;\n  background-color: ${Colors.primary};\n  color: ${Colors.background};\n  width: ${LABEL_WIDTH};\n  padding: ${INPUT_PADDING};\n  ${fontBold};\n`;\n\nexport const InputsContainer = styled.div`\n  width: ${INPUT_WIDTH};\n\n  > div {\n    margin-bottom: ${CONTAINER_MARGIN_BOTTOM};\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n`;\n\nexport const InputContainer = styled.div`\n  display: flex;\n`;\n\nexport const Input = styled.input`\n  background-color: ${Colors.secondary};\n  padding: ${INPUT_PADDING};\n  width: 80%;\n\n  &:focus {\n    background-color: ${Colors.primary};\n    color: ${Colors.background};\n    border-left: 1px solid ${Colors.background};\n\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\nexport const Button = styled.button<{ color: keyof typeof Colors }>`\n  font-size: 0.8em;\n  padding: 0.2em 0.5em;\n  width: 20%;\n  font-weight: bold;\n  border: 0.3em solid ${({ color }) => Colors[color]};\n  color: ${({ color }) => Colors[color]};\n\n  &:focus,\n  &:hover {\n    background-color: ${({ color }) => Colors[color]};\n    color: ${Colors.background};\n  }\n`;\n","export const LABEL_WIDTH = \"30%\";\n\nexport const INPUT_WIDTH = \"70%\";\n\nexport const INPUT_PADDING = \"0.5em 0.7em\";\nexport const BUTTON_PADDING = \"0.5rem 1rem\";\nexport const BUTTON_BORDER_SIZE = \"0.3rem\";\n\nexport const CONTAINER_MARGIN_BOTTOM = \"0.5em\";\n","import React from \"react\";\n\nimport {\n  Container,\n  Label,\n  InputsContainer,\n  InputContainer,\n  Button,\n  Input,\n} from \"./style\";\n\ninterface IProps {\n  label: string;\n  inputs: Array<string>;\n  setValue: (index: number, value: string) => void;\n  addField: () => void;\n  removeField: (index: number) => void;\n}\n\nconst ArrayInputs: React.FC<IProps> = ({\n  label,\n  inputs,\n  setValue,\n  addField,\n  removeField,\n}) => {\n  return (\n    <Container>\n      <Label>{label}</Label>\n      <InputsContainer>\n        {inputs.map((value, index) => (\n          <InputContainer key={index}>\n            <Input\n              value={value}\n              onChange={e => setValue(index, e.target.value)}\n            />\n            {index !== 0 && (\n              <Button\n                color=\"red\"\n                type=\"button\"\n                onClick={() => removeField(index)}\n              >\n                Remove\n              </Button>\n            )}\n            {index === 0 && (\n              <Button color=\"green\" type=\"button\" onClick={() => addField()}>\n                Add\n              </Button>\n            )}\n          </InputContainer>\n        ))}\n      </InputsContainer>\n    </Container>\n  );\n};\n\nexport default ArrayInputs;\n","import styled from \"styled-components\";\n\nimport { BUTTON_PADDING, BUTTON_BORDER_SIZE } from \"Assets/Style/Constants\";\n\nimport Colors, { ColorsType } from \"Assets/Style/Colors\";\nimport { fontBold } from \"Assets/Style/Fonts\";\n\nexport const Container = styled.button<{ color: ColorsType }>`\n  padding: ${BUTTON_PADDING};\n  transition: all 0.15s ease-in-out;\n  border: ${BUTTON_BORDER_SIZE} solid ${({ color }) => Colors[color]};\n  color: ${({ color }) => Colors[color]};\n  ${fontBold};\n\n  &:focus,\n  &:hover {\n    background-color: ${({ color }) => Colors[color]};\n    color: ${Colors.background};\n  }\n`;\n","import React from \"react\";\n\nimport { ColorsType } from \"Assets/Style/Colors\";\n\nimport { Container } from \"./style\";\n\ninterface IProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  color?: ColorsType;\n  \"aria-label\": string;\n}\n\nconst Button: React.FC<IProps> = props => {\n  return (\n    <Container color={props.color || \"primary\"} {...props}>\n      {props.children}\n    </Container>\n  );\n};\n\nexport default Button;\n","import { Area } from \"react-easy-crop/types\";\n\nconst createImage = async (url: string) => {\n  const image = await new Promise((resolve, reject) => {\n    const image = new Image();\n    image.addEventListener(\"load\", () => resolve(image));\n    image.addEventListener(\"error\", error => reject(error));\n    image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n    image.src = url;\n  });\n\n  return image as HTMLImageElement;\n};\n\n/**\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\n * @param {File} image - Image File url\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\n */\nexport default async function getCroppedImg(imageSrc: string, pixelCrop: Area) {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n  const maxSize = Math.max(image.width, image.height);\n  const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2));\n\n  // set each dimensions to double largest dimension to allow for a safe area for the\n  // image to rotate in without being clipped by canvas context\n  canvas.width = safeArea;\n  canvas.height = safeArea;\n\n  // translate canvas context to a central location on image to allow rotating around the center.\n  ctx.translate(safeArea / 2, safeArea / 2);\n  ctx.translate(-safeArea / 2, -safeArea / 2);\n\n  // draw rotated image and store data.\n  ctx.drawImage(\n    image,\n    safeArea / 2 - image.width * 0.5,\n    safeArea / 2 - image.height * 0.5,\n  );\n  const data = ctx.getImageData(0, 0, safeArea, safeArea);\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n\n  // paste generated rotate image with correct offsets for x,y crop values.\n  ctx.putImageData(\n    data,\n    0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x,\n    0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y,\n  );\n\n  return canvas.toDataURL(\"image/jpeg\");\n}\n","import styled from \"styled-components\";\n\nimport { BUTTON_PADDING } from \"Assets/Style/Constants\";\n\nimport Colors from \"Assets/Style/Colors\";\n\nexport const Container = styled.div`\n  position: relative;\n  overflow: hidden;\n  cursor: pointer;\n`;\n\nexport const Input = styled.input`\n  position: absolute;\n  top: 0;\n  left: 0;\n  opacity: 0;\n  padding: ${BUTTON_PADDING};\n  cursor: pointer;\n\n  &::-webkit-file-upload-button {\n    cursor: pointer;\n  }\n\n  &:hover + button,\n  &:focus + button {\n    background-color: ${Colors.primary};\n    color: ${Colors.background};\n  }\n`;\n","import React from \"react\";\n\nimport Button from \"Components/Button\";\n\nimport { Container, Input } from \"./style\";\n\ninterface IProps {\n  label: string;\n  setValue: (target: EventTarget & HTMLInputElement) => void;\n}\n\nconst ImgUploadButton: React.FC<IProps> = ({ label, setValue }) => (\n  <Container>\n    <Input\n      aria-label={label}\n      type=\"file\"\n      name=\"myfile\"\n      onChange={e => setValue(e.target)}\n    />\n    <Button type=\"button\" aria-label={label} disabled>\n      {label}\n    </Button>\n  </Container>\n);\n\nexport default ImgUploadButton;\n","import styled from \"styled-components\";\n\nimport {\n  CONTAINER_MARGIN_BOTTOM,\n  LABEL_WIDTH,\n  INPUT_PADDING,\n  INPUT_WIDTH,\n} from \"Assets/Style/Constants\";\n\nimport Colors from \"Assets/Style/Colors\";\nimport { fontBold } from \"Assets/Style/Fonts\";\n\nexport const Container = styled.div`\n  display: flex;\n  margin-bottom: ${CONTAINER_MARGIN_BOTTOM};\n`;\n\nexport const ButtonsContainer = styled.div`\n  display: flex;\n  width: 70%;\n  justify-content: space-around;\n  margin-top: ${CONTAINER_MARGIN_BOTTOM};\n`;\n\nexport const Label = styled.div`\n  padding: ${INPUT_PADDING};\n  display: flex;\n  align-items: center;\n  font-weight: bold;\n  background-color: ${Colors.primary};\n  color: ${Colors.background};\n  width: ${LABEL_WIDTH};\n  ${fontBold};\n\n  &:before {\n    content: \" *\";\n    margin-right: 0.3em;\n    color: ${Colors.red};\n  }\n`;\n\nexport const ImageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: ${INPUT_WIDTH};\n  background-color: ${Colors.secondary};\n  padding: ${INPUT_PADDING};\n\n  > img {\n    max-width: 100%;\n    max-height: 50vh;\n  }\n`;\n\nexport const CropperContainer = styled.div`\n  position: relative;\n  height: 50vh;\n  width: 100%;\n`;\n","import React, { useState, useCallback } from \"react\";\nimport Cropper from \"react-easy-crop\";\nimport { Area } from \"react-easy-crop/types\";\n\nimport Button from \"../Button\";\nimport getCroppedImg from \"./cropImage\";\nimport ImgUploadButton from \"./ImgUploadButton\";\n\nimport {\n  Container,\n  Label,\n  ImageContainer,\n  ButtonsContainer,\n  CropperContainer,\n} from \"./style\";\n\ninterface IProps {\n  label: string;\n  buttonLabel: string;\n  buttonEditLabel: string;\n  buttonRemoveLabel: string;\n  buttonSelectLabel: string;\n  value: string;\n  setValue: (value: string) => void;\n}\n\nconst ProfileImage: React.FC<IProps> = ({\n  label,\n  buttonLabel,\n  buttonEditLabel,\n  buttonRemoveLabel,\n  buttonSelectLabel,\n  value,\n  setValue,\n}) => {\n  const [selectedImageBase64, setSelectedImageBase64] = useState<string>(\"\");\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\n  const [zoom, setZoom] = useState(1);\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState<Area>();\n\n  const onCrop = useCallback((croppedArea, croppedAreaPixels) => {\n    setCroppedAreaPixels(croppedAreaPixels);\n  }, []);\n\n  const onSelectImage = useCallback((target: HTMLInputElement) => {\n    if (!target.files || !target.files[0]) return;\n\n    const file = target.files[0];\n    const reader = new FileReader();\n\n    reader.addEventListener(\"load\", () => {\n      setSelectedImageBase64(reader.result as string);\n    });\n\n    reader.readAsDataURL(file);\n  }, []);\n\n  const onComplete = useCallback(async () => {\n    try {\n      const croppedImage = await getCroppedImg(\n        selectedImageBase64,\n        croppedAreaPixels as Area,\n      );\n      setValue(croppedImage);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [croppedAreaPixels, selectedImageBase64, setValue]);\n\n  const reset = useCallback(() => {\n    setSelectedImageBase64(\"\");\n    setValue(\"\");\n  }, [setValue]);\n\n  const edit = useCallback(() => {\n    setValue(\"\");\n  }, [setValue]);\n\n  const firstStageButtons = useCallback(() => {\n    const hasImageSelected = !!selectedImageBase64;\n    const hasImageCropped = !!value;\n\n    if (!hasImageSelected || hasImageCropped) return;\n\n    return (\n      <>\n        <Button\n          aria-label=\"Remove Profile Picture\"\n          name=\"removeProfileImage\"\n          onClick={reset}\n          type=\"button\"\n          color=\"red\"\n        >\n          {buttonRemoveLabel}\n        </Button>\n        <Button\n          aria-label=\"Select Profile Image\"\n          name=\"selectProfileImage\"\n          onClick={onComplete}\n          type=\"button\"\n        >\n          {buttonSelectLabel}\n        </Button>\n      </>\n    );\n  }, [\n    buttonRemoveLabel,\n    buttonSelectLabel,\n    onComplete,\n    reset,\n    selectedImageBase64,\n    value,\n  ]);\n\n  const secondStageButtons = useCallback(() => {\n    const hasImageCropped = !!value;\n\n    if (!hasImageCropped) return;\n\n    return (\n      <>\n        <Button\n          aria-label=\"Remove Profile Picture\"\n          name=\"removeProfileImage\"\n          onClick={reset}\n          type=\"button\"\n          color=\"red\"\n        >\n          {buttonRemoveLabel}\n        </Button>\n        <Button\n          aria-label=\"Edit Profile Picture\"\n          name=\"editProfileImage\"\n          onClick={edit}\n          type=\"button\"\n        >\n          {buttonEditLabel}\n        </Button>\n      </>\n    );\n  }, [buttonEditLabel, buttonRemoveLabel, edit, reset, value]);\n\n  return (\n    <Container>\n      <Label>{label}</Label>\n      <ImageContainer>\n        {!selectedImageBase64 && (\n          <ImgUploadButton label={buttonLabel} setValue={onSelectImage} />\n        )}\n        {selectedImageBase64 && !value && (\n          <CropperContainer>\n            <Cropper\n              image={selectedImageBase64}\n              crop={crop}\n              zoom={zoom}\n              onCropChange={setCrop}\n              onCropComplete={onCrop}\n              onZoomChange={setZoom}\n              aspect={1}\n            />\n          </CropperContainer>\n        )}\n        {value && <img src={value} alt=\"\" />}\n        {(selectedImageBase64 || value) && (\n          <ButtonsContainer>\n            {firstStageButtons()}\n            {secondStageButtons()}\n          </ButtonsContainer>\n        )}\n      </ImageContainer>\n    </Container>\n  );\n};\n\nexport default ProfileImage;\n","import styled from \"styled-components\";\n\nimport { INPUT_PADDING } from \"Assets/Style/Constants\";\n\nimport Colors from \"Assets/Style/Colors\";\nimport { fontBold } from \"Assets/Style/Fonts\";\n\nexport const Fieldset = styled.fieldset`\n  > legend {\n    font-weight: bold;\n    width: 100%;\n    background-color: ${Colors.primary};\n    color: ${Colors.background};\n    border-bottom: 1px solid ${Colors.background};\n    padding: ${INPUT_PADDING};\n    ${fontBold};\n  }\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  margin-bottom: 0.5em;\n  overflow: hidden;\n  position: relative;\n\n  > div {\n    width: 100%;\n  }\n`;\n\nexport const Label = styled.label`\n  text-align: center;\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  height: 100%;\n  padding: ${INPUT_PADDING};\n  z-index: 5;\n  background-color: ${Colors.secondary};\n  color: ${Colors.primary};\n  font-weight: bold;\n  ${fontBold};\n`;\n\nexport const Input = styled.input`\n  display: none;\n\n  &:checked + label,\n  &:hover + label,\n  &:focus + label {\n    background-color: ${Colors.primary};\n    color: ${Colors.background};\n  }\n`;\n","import React from \"react\";\n\nimport { Fieldset, Container, Label, Input } from \"./style\";\n\ninterface IProps {\n  label: string;\n  name: string;\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  options: Array<{\n    value: string | number;\n    name: string;\n  }>;\n}\n\nconst Radio: React.FC<IProps> = ({ label, value, name, onChange, options }) => {\n  return (\n    <Fieldset>\n      <legend>{label}</legend>\n      <Container>\n        {options.map(option => (\n          <div key={option.value}>\n            <Input\n              aria-label={option.name}\n              type=\"radio\"\n              name={name}\n              value={option.value}\n              id={`${option.value}`}\n              onChange={onChange}\n              checked={value === option.value}\n            />\n            <Label htmlFor={`${option.value}`}>\n              <span>{option.name}</span>\n            </Label>\n          </div>\n        ))}\n      </Container>\n    </Fieldset>\n  );\n};\n\nexport default Radio;\n","import styled from \"styled-components\";\n\nimport {\n  CONTAINER_MARGIN_BOTTOM,\n  LABEL_WIDTH,\n  INPUT_WIDTH,\n  INPUT_PADDING,\n} from \"Assets/Style/Constants\";\n\nimport Colors from \"Assets/Style/Colors\";\nimport { fontBold, fontRegular } from \"Assets/Style/Fonts\";\n\ninterface ILabelProps {\n  required?: boolean;\n}\n\nexport const Container = styled.div`\n  margin-bottom: ${CONTAINER_MARGIN_BOTTOM};\n`;\n\nexport const InputContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  position: relative;\n  overflow: hidden;\n\n  > textarea {\n    background-color: ${Colors.secondary};\n    width: ${INPUT_WIDTH};\n    padding: ${INPUT_PADDING};\n    min-height: 7em;\n    ${fontRegular};\n\n    &:focus {\n      background-color: ${Colors.primary};\n      color: ${Colors.background};\n      border-left: 1px solid ${Colors.background};\n\n      &::placeholder {\n        color: transparent;\n      }\n    }\n  }\n`;\n\nexport const LabelContainer = styled.div`\n  background-color: ${Colors.primary};\n  width: ${LABEL_WIDTH};\n  display: flex;\n  align-items: center;\n`;\n\nexport const Label = styled.label<ILabelProps>`\n  display: flex;\n  margin: 0.5em;\n  color: ${Colors.background};\n  ${fontBold};\n\n  ${({ required }) =>\n    required &&\n    `\n    &:before {\n      content: \" *\";\n      margin-right: 0.3em;\n      color: ${Colors.red};\n    }\n  `}\n`;\n\nexport const ErrorContainer = styled.div`\n  width: 100%;\n  padding: ${INPUT_PADDING};\n  background-color: ${Colors.red};\n`;\n\nexport const Limit = styled.span<{ remaining: number }>`\n  color: ${({ remaining }) => (remaining >= 0 ? \"#817575\" : Colors.red)};\n  position: absolute;\n  right: 1rem;\n  bottom: 0.5rem;\n`;\n","import React, { useState } from \"react\";\nimport TextareaAutosize from \"react-textarea-autosize\";\n\nimport {\n  Container,\n  LabelContainer,\n  Label,\n  InputContainer,\n  ErrorContainer,\n  Limit,\n} from \"./style\";\n\ninterface IProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Para acessibilidade, todo input precisa de uma legenda, caso não queria\n   * que ela seja visível, utilize a prop isLabelVisible={false}\n   */\n  name: string;\n  label: string;\n  isRequired?: boolean;\n  errorMessage?: string;\n  limit?: number;\n  innerRef?: any;\n  containerStyle?: React.CSSProperties;\n}\n\nconst Textarea: React.FC<IProps> = props => {\n  const {\n    label,\n    innerRef,\n    errorMessage,\n    containerStyle,\n    isRequired,\n    placeholder,\n    limit,\n    name,\n    id,\n  } = props;\n\n  const [length, setLength] = useState<number>(0);\n\n  return (\n    <Container style={containerStyle}>\n      <InputContainer>\n        <LabelContainer>\n          <Label htmlFor={id} required={isRequired}>\n            {label}\n          </Label>\n        </LabelContainer>\n        <TextareaAutosize\n          name={name}\n          onChange={e => setLength(e.target.value.length)}\n          placeholder={placeholder || \"\"}\n          ref={innerRef}\n        />\n        {limit && <Limit remaining={limit - length}>{limit - length}</Limit>}\n      </InputContainer>\n      {errorMessage && (\n        <ErrorContainer>\n          <label>{errorMessage}</label>\n        </ErrorContainer>\n      )}\n    </Container>\n  );\n};\n\nexport default Textarea;\n","import styled from \"styled-components\";\n\nimport {\n  CONTAINER_MARGIN_BOTTOM,\n  INPUT_WIDTH,\n  LABEL_WIDTH,\n  INPUT_PADDING,\n} from \"Assets/Style/Constants\";\n\nimport Colors from \"Assets/Style/Colors\";\nimport { fontBold } from \"Assets/Style/Fonts\";\n\ninterface ILabelProps {\n  required?: boolean;\n}\n\nexport const Container = styled.div`\n  margin-bottom: ${CONTAINER_MARGIN_BOTTOM};\n`;\n\nexport const InputContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  position: relative;\n`;\n\nexport const LabelContainer = styled.div`\n  background-color: ${Colors.primary};\n  width: ${LABEL_WIDTH};\n  display: flex;\n  align-items: center;\n`;\n\nexport const Label = styled.label<ILabelProps>`\n  display: flex;\n  margin: 0.5em;\n  color: ${Colors.background};\n  ${fontBold};\n\n  ${({ required }) =>\n    required &&\n    `\n    &:before {\n      content: \" *\";\n      margin-right: 0.3em;\n      color: ${Colors.red};\n    }\n  `}\n`;\n\nexport const Input = styled.input`\n  background-color: ${Colors.secondary};\n  padding: ${INPUT_PADDING};\n  width: ${INPUT_WIDTH};\n\n  &:focus {\n    background-color: ${Colors.primary};\n    color: ${Colors.background};\n    border-left: 1px solid ${Colors.background};\n\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\nexport const ErrorContainer = styled.div`\n  width: 100%;\n  padding: ${INPUT_PADDING};\n  background-color: ${Colors.red};\n`;\n","import React from \"react\";\n\nimport {\n  Container,\n  LabelContainer,\n  Label,\n  InputContainer,\n  Input,\n  ErrorContainer,\n} from \"./style\";\n\ninterface IProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Para acessibilidade, todo input precisa de uma legenda, caso não queria\n   * que ela seja visível, utilize a prop isLabelVisible={false}\n   */\n  name: string;\n  label: string;\n  isRequired?: boolean;\n  errorMessage?: string;\n  innerRef?: any;\n  containerStyle?: React.CSSProperties;\n}\n\nconst TextInput: React.FC<IProps> = props => {\n  const {\n    label,\n    innerRef,\n    errorMessage,\n    containerStyle,\n    isRequired,\n    id,\n  } = props;\n\n  return (\n    <Container style={containerStyle}>\n      <InputContainer>\n        <LabelContainer>\n          <Label htmlFor={id} required={isRequired}>\n            {label}\n          </Label>\n        </LabelContainer>\n        <Input {...props} type=\"text\" ref={innerRef} />\n      </InputContainer>\n      {errorMessage && (\n        <ErrorContainer>\n          <label>{errorMessage}</label>\n        </ErrorContainer>\n      )}\n    </Container>\n  );\n};\n\nexport default TextInput;\n","export function captalizeFirst(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function captalizeAllFirst(str: string) {\n  return str\n    .split(\" \")\n    .map(str => captalizeFirst(str))\n    .join(\" \");\n}\n\nexport function removeNonNumeric(str: string) {\n  return str.replace(/\\D/g, \"\");\n}\n","import { IDate } from \"Assets/Languages/Dates\";\nimport { IForm } from \"Assets/Languages/Form\";\n\nexport const AllLangs = {\n  EN: \"English\",\n  BR: \"Português (Brasil)\",\n  ES: \"Español\",\n};\n\nexport type AllLangsOptions = keyof typeof AllLangs;\n\nexport interface ITranslations {\n  Form: IForm;\n  Date: IDate;\n}\n\nexport default AllLangs;\n","import AllLangs from \"Assets/Languages\";\n\nexport interface IForm {\n  reactResumeGenerator: string;\n  by: string;\n  name: string;\n  headline: string;\n  contact: string;\n  graduation: string;\n  portfolio: string;\n  competences: string;\n  languages: string;\n  observation: string;\n  salaryExpectation: string;\n  age: string;\n  about: string;\n  employment: string;\n  actualJob: string;\n  academic: string;\n  submit: string;\n  profilePicture: string;\n  uploadFile: string;\n  buttonRemove: string;\n  buttonEdit: string;\n  buttonSelect: string;\n  language: string;\n  currency: string;\n}\n\nconst EN: IForm = {\n  reactResumeGenerator: \"React Resume Generator\",\n  by: \"By\",\n  name: \"Name\",\n  headline: \"Headline\",\n  contact: \"Contact\",\n  graduation: \"Graduation\",\n  portfolio: \"Portfolio\",\n  competences: \"Competences\",\n  languages: \"Languages\",\n  observation: \"Observations\",\n  salaryExpectation: \"Salary Expectation\",\n  age: \"Age\",\n  about: \"About You\",\n  employment: \"Employment History\",\n  actualJob: \"Present\",\n  academic: \"Academic Formation\",\n  submit: \"Submit\",\n  profilePicture: \"Profile Picture\",\n  uploadFile: \"Upload a Image\",\n  buttonEdit: \"Edit\",\n  buttonRemove: \"Remove\",\n  buttonSelect: \"Select\",\n  language: \"Language\",\n  currency: \"Currency\",\n};\n\nconst BR: IForm = {\n  reactResumeGenerator: \"Gerador de Currículos React\",\n  by: \"Por\",\n  name: \"Nome\",\n  headline: \"Titúlo Profissional\",\n  graduation: \"Graduação\",\n  contact: \"Contato\",\n  portfolio: \"Portfólio\",\n  competences: \"Competências\",\n  languages: \"Idiomas\",\n  observation: \"Obserações\",\n  salaryExpectation: \"Pretensão Salárial\",\n  age: \"Idade\",\n  about: \"Sobre Você\",\n  employment: \"Experiência Profissional\",\n  actualJob: \"Presente\",\n  academic: \"Formação Academica\",\n  submit: \"Enviar\",\n  profilePicture: \"Foto de Perfil\",\n  uploadFile: \"Upload de Imagem\",\n  buttonEdit: \"Editar\",\n  buttonRemove: \"Remover\",\n  buttonSelect: \"Selecionar\",\n  language: \"Idioma\",\n  currency: \"Moeda\",\n};\n\nconst ES: IForm = {\n  reactResumeGenerator: \"Generadora de Currículum React\",\n  by: \"Por\",\n  name: \"Nombre\",\n  headline: \"Título Profesional\",\n  contact: \"Contacto\",\n  graduation: \"Graduación\",\n  portfolio: \"Portafolio\",\n  competences: \"Competencias\",\n  languages: \"Idiomas\",\n  observation: \"Observaciones\",\n  salaryExpectation: \"Expectativa Salarial\",\n  age: \"Años\",\n  about: \"Acerca de Ti\",\n  employment: \"Historial de Empleo\",\n  actualJob: \"Presente\",\n  academic: \"Formación Académica\",\n  submit: \"Enviar\",\n  profilePicture: \"Foto de Perfil\",\n  uploadFile: \"Upload una Imagen\",\n  buttonEdit: \"Editar\",\n  buttonRemove: \"Eliminar\",\n  buttonSelect: \"Seleccione\",\n  language: \"Idioma\",\n  currency: \"Moneda\",\n};\n\nconst Form: { [T in keyof typeof AllLangs]: IForm } = {\n  EN,\n  BR,\n  ES,\n};\n\nexport default Form;\n","import React, { useCallback, useState, useMemo } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport ArrayInputs from \"Components/ArrayInputs\";\nimport Button from \"Components/Button\";\nimport Image from \"Components/Image\";\nimport Radio from \"Components/Radio\";\nimport Textarea from \"Components/Textarea\";\nimport TextInput from \"Components/TextInput\";\n\nimport { removeNonNumeric } from \"Utils/String\";\n\nimport { AllLangs, AllLangsOptions } from \"Assets/Languages\";\nimport Form from \"Assets/Languages/Form\";\n\nimport { Container, Header, FormContainer, ButtonContainer } from \"./style\";\n\ntype AllowedCurrencies = \"USD\" | \"BRL\" | \"EUR\";\n\nconst currencyOptions = [\n  {\n    name: \"USD ($)\",\n    value: \"USD\",\n  },\n  {\n    name: \"BRL (R$)\",\n    value: \"BRL\",\n  },\n  {\n    name: \"EUR (€)\",\n    value: \"EUR\",\n  },\n];\n\nconst View: React.FC = () => {\n  const { register, handleSubmit, setValue, errors } = useForm();\n  const [language, setLanguage] = useState<AllLangsOptions>(\"EN\");\n  const [currency, setCurrency] = useState<AllowedCurrencies>(\"USD\");\n  const [profilePicture, setProfilePicture] = useState<string>(\"\");\n  const [skills, setSkills] = useState<Array<string>>([\"\"]);\n\n  const onSubmit = useCallback((data: any) => {\n    console.log(data);\n  }, []);\n\n  const formatAge = useCallback(\n    (age: string) => {\n      let formatted = removeNonNumeric(age);\n\n      if (formatted.length > 3) {\n        formatted = formatted.substr(0, 3);\n      }\n\n      setValue(\"age\", formatted);\n    },\n    [setValue],\n  );\n\n  const getLanguagesOptions = useMemo(() => {\n    const allLangsOptions = [];\n\n    for (const lang in AllLangs) {\n      allLangsOptions.push({\n        name: AllLangs[lang as AllLangsOptions],\n        value: lang,\n      });\n    }\n\n    return allLangsOptions;\n  }, []);\n\n  const changeSkillValue = useCallback(\n    (index: number, value: string) => {\n      const newSkills = skills.slice();\n\n      newSkills[index] = value;\n\n      setSkills(newSkills);\n    },\n    [skills],\n  );\n\n  const addSkill = useCallback(() => {\n    const newSkills = skills.slice();\n\n    newSkills.push(\"\");\n\n    setSkills(newSkills);\n  }, [skills]);\n\n  const removeSkill = useCallback(\n    (index: number) => {\n      const newSkills = skills.slice();\n\n      newSkills.splice(index, 1);\n\n      setSkills(newSkills);\n    },\n    [skills],\n  );\n\n  return (\n    <Container>\n      <Header>{Form[language].reactResumeGenerator}</Header>\n      <FormContainer onSubmit={handleSubmit(onSubmit)}>\n        <Radio\n          label={Form[language].language}\n          name=\"language\"\n          value={language}\n          onChange={e => setLanguage(e.target.value as AllLangsOptions)}\n          options={getLanguagesOptions}\n        />\n        <Radio\n          label={Form[language].currency}\n          name=\"currency\"\n          value={currency}\n          onChange={e => setCurrency(e.target.value as AllowedCurrencies)}\n          options={currencyOptions}\n        />\n        <Image\n          label={Form[language].profilePicture}\n          buttonLabel={Form[language].uploadFile}\n          buttonEditLabel={Form[language].buttonEdit}\n          buttonRemoveLabel={Form[language].buttonRemove}\n          buttonSelectLabel={Form[language].buttonSelect}\n          value={profilePicture}\n          setValue={setProfilePicture}\n        />\n        <TextInput\n          isRequired\n          label={Form[language].name}\n          name=\"name\"\n          innerRef={register({\n            required: true,\n          })}\n          errorMessage={errors.name && \"This Field Is Required.\"}\n        />\n        <TextInput\n          isRequired\n          label={Form[language].headline}\n          name=\"headline\"\n          innerRef={register({\n            required: true,\n          })}\n          errorMessage={errors.name && \"This Field Is Required.\"}\n        />\n        <TextInput\n          label={Form[language].age}\n          name=\"age\"\n          onChange={e => formatAge(e.target.value)}\n          innerRef={register()}\n        />\n        <TextInput\n          label={Form[language].graduation}\n          name=\"gaduation\"\n          innerRef={register()}\n        />\n        <Textarea\n          isRequired\n          label={Form[language].about}\n          name=\"about\"\n          innerRef={register({\n            required: true,\n          })}\n          errorMessage={errors.name && \"This Field Is Required.\"}\n        />\n        <TextInput\n          label={Form[language].salaryExpectation}\n          name=\"salaryExpectation\"\n          onChange={e =>\n            setValue(\"salaryExpectation\", removeNonNumeric(e.target.value))\n          }\n          innerRef={register()}\n        />\n        <ArrayInputs\n          label={Form[language].competences}\n          inputs={skills}\n          setValue={changeSkillValue}\n          removeField={removeSkill}\n          addField={addSkill}\n        />\n        <ButtonContainer>\n          <Button aria-label=\"submit\">{Form[language].submit}</Button>\n        </ButtonContainer>\n      </FormContainer>\n    </Container>\n  );\n};\n\nexport default View;\n","import styled from \"styled-components\";\n\nimport Colors from \"Assets/Style/Colors\";\nimport { fontBold } from \"Assets/Style/Fonts\";\n\nexport const Container = styled.div`\n  padding: 1em 0;\n  width: 100vw;\n  min-height: 100vh;\n  background-color: ${Colors.background};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Header = styled.h1`\n  display: flex;\n  flex-direction: column;\n  margin: 1em 0;\n  ${fontBold};\n  font-size: 3em;\n  text-align: center;\n\n  @media screen and (max-width: 900px) {\n    margin: 0;\n    font-size: 2em;\n    padding: 1em;\n  }\n`;\n\nexport const FormContainer = styled.form`\n  width: 50vw;\n  padding: 1em;\n\n  > h1 {\n    text-align: center;\n    margin-bottom: 2em;\n    text-transform: uppercase;\n  }\n\n  @media screen and (max-width: 900px) {\n    width: 100vw;\n    padding: 0.5em;\n  }\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n","export const fontRegular = \"font-family: MontserratRegular, sans-serif\";\n\nexport const fontRegularItalic =\n  \"font-family: MontserratRegularItalic, sans-serif\";\n\nexport const fontBoldItalic = \"font-family: MontserratBoldItalic, sans-serif\";\n\nexport const fontBold = \"font-family: MontserratBold, sans-serif\";\n"],"sourceRoot":""}