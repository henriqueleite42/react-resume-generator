{"version":3,"sources":["Components/Button/style.ts","Assets/Style/Constants.ts","Components/Button/index.tsx","Components/Image/cropImage.ts","Components/Image/ImgUploadButton/style.ts","Components/Image/ImgUploadButton/index.tsx","Components/Image/style.ts","Components/Image/index.tsx","Components/Radio/style.ts","Components/Radio/index.tsx","Components/Textarea/style.ts","Components/Textarea/index.tsx","Components/TextInput/style.ts","Components/TextInput/index.tsx","Utils/String.ts","Assets/Languages/index.ts","Assets/Languages/Form.ts","Views/Home/index.tsx","Views/Home/style.ts","Assets/Style/Fonts.ts"],"names":["Container","styled","button","color","Colors","fontBold","background","Button","props","children","createImage","url","a","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getCroppedImg","imageSrc","pixelCrop","canvas","document","createElement","ctx","getContext","maxSize","Math","max","width","height","safeArea","sqrt","translate","drawImage","data","getImageData","putImageData","x","y","toDataURL","div","Input","input","primary","ImgUploadButton","label","setValue","aria-label","type","name","onChange","e","target","disabled","ButtonsContainer","Label","red","ImageContainer","secondary","CropperContainer","ProfileImage","buttonLabel","buttonEditLabel","buttonRemoveLabel","buttonSelectLabel","value","useState","selectedImageBase64","setSelectedImageBase64","crop","setCrop","zoom","setZoom","croppedAreaPixels","setCroppedAreaPixels","onCrop","useCallback","croppedArea","onSelectImage","files","file","reader","FileReader","result","readAsDataURL","onComplete","croppedImage","console","reset","edit","firstStageButtons","onClick","secondStageButtons","onCropChange","onCropComplete","onZoomChange","aspect","alt","active","Radio","options","map","option","key","htmlFor","id","InputContainer","fontRegular","LabelContainer","required","ErrorContainer","Limit","span","remaining","Textarea","innerRef","errorMessage","containerStyle","isRequired","placeholder","limit","length","setLength","style","ref","TextInput","captalizeFirst","str","charAt","toUpperCase","slice","captalizeAllFirst","split","join","removeNonNumeric","replace","AllLangs","EN","BR","ES","Form","reactResumeGenerator","by","headline","contact","graduation","portfolio","competences","languages","observation","salaryExpectation","age","about","employment","actualJob","academic","submit","skills","profilePicture","uploadFile","buttonEdit","buttonRemove","buttonSelect","currencyOptions","View","useForm","register","handleSubmit","errors","language","setLanguage","currency","setCurrency","setProfilePicture","onSubmit","log","formatAge","formatted","substr","getLanguagesOptions","useMemo","allLangsOptions","lang","push","Header","FormContainer","form","ButtonContainer"],"mappings":"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","file":"static/js/1.9f0ecd66.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nimport { BUTTON_PADDING, BUTTON_BORDER_SIZE } from \"Assets/Style/Constants\";\n\nimport Colors, { ColorsType } from \"Assets/Style/Colors\";\nimport { fontBold } from \"Assets/Style/Fonts\";\n\nexport const Container = styled.button<{ color: ColorsType }>`\n  padding: ${BUTTON_PADDING};\n  transition: all 0.15s ease-in-out;\n  border: ${BUTTON_BORDER_SIZE} solid ${({ color }) => Colors[color]};\n  color: ${({ color }) => Colors[color]};\n  ${fontBold};\n\n  &:focus,\n  &:hover {\n    background-color: ${({ color }) => Colors[color]};\n    color: ${Colors.background};\n  }\n`;\n","export const LABEL_WIDTH = \"30%\";\n\nexport const INPUT_WIDTH = \"70%\";\n\nexport const INPUT_PADDING = \"0.5em 0.7em\";\nexport const BUTTON_PADDING = \"0.5rem 1rem\";\nexport const BUTTON_BORDER_SIZE = \"0.3rem\";\n\nexport const CONTAINER_MARGIN_BOTTOM = \"0.5em\";\n","import React from \"react\";\n\nimport { ColorsType } from \"Assets/Style/Colors\";\n\nimport { Container } from \"./style\";\n\ninterface IProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  color?: ColorsType;\n  \"aria-label\": string;\n}\n\nconst Button: React.FC<IProps> = props => {\n  return (\n    <Container color={props.color || \"primary\"} {...props}>\n      {props.children}\n    </Container>\n  );\n};\n\nexport default Button;\n","import { Area } from \"react-easy-crop/types\";\n\nconst createImage = async (url: string) => {\n  const image = await new Promise((resolve, reject) => {\n    const image = new Image();\n    image.addEventListener(\"load\", () => resolve(image));\n    image.addEventListener(\"error\", error => reject(error));\n    image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n    image.src = url;\n  });\n\n  return image as HTMLImageElement;\n};\n\n/**\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\n * @param {File} image - Image File url\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\n */\nexport default async function getCroppedImg(imageSrc: string, pixelCrop: Area) {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n  const maxSize = Math.max(image.width, image.height);\n  const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2));\n\n  // set each dimensions to double largest dimension to allow for a safe area for the\n  // image to rotate in without being clipped by canvas context\n  canvas.width = safeArea;\n  canvas.height = safeArea;\n\n  // translate canvas context to a central location on image to allow rotating around the center.\n  ctx.translate(safeArea / 2, safeArea / 2);\n  ctx.translate(-safeArea / 2, -safeArea / 2);\n\n  // draw rotated image and store data.\n  ctx.drawImage(\n    image,\n    safeArea / 2 - image.width * 0.5,\n    safeArea / 2 - image.height * 0.5,\n  );\n  const data = ctx.getImageData(0, 0, safeArea, safeArea);\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n\n  // paste generated rotate image with correct offsets for x,y crop values.\n  ctx.putImageData(\n    data,\n    0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x,\n    0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y,\n  );\n\n  return canvas.toDataURL(\"image/jpeg\");\n}\n","import styled from \"styled-components\";\n\nimport { BUTTON_PADDING } from \"Assets/Style/Constants\";\n\nimport Colors from \"Assets/Style/Colors\";\n\nexport const Container = styled.div`\n  position: relative;\n  overflow: hidden;\n  cursor: pointer;\n`;\n\nexport const Input = styled.input`\n  position: absolute;\n  top: 0;\n  left: 0;\n  opacity: 0;\n  padding: ${BUTTON_PADDING};\n  cursor: pointer;\n\n  &::-webkit-file-upload-button {\n    cursor: pointer;\n  }\n\n  &:hover + button,\n  &:focus + button {\n    background-color: ${Colors.primary};\n    color: ${Colors.background};\n  }\n`;\n","import React from \"react\";\n\nimport Button from \"Components/Button\";\n\nimport { Container, Input } from \"./style\";\n\ninterface IProps {\n  label: string;\n  setValue: (target: EventTarget & HTMLInputElement) => void;\n}\n\nconst ImgUploadButton: React.FC<IProps> = ({ label, setValue }) => (\n  <Container>\n    <Input\n      aria-label={label}\n      type=\"file\"\n      name=\"myfile\"\n      onChange={e => setValue(e.target)}\n    />\n    <Button type=\"button\" aria-label={label} disabled>\n      {label}\n    </Button>\n  </Container>\n);\n\nexport default ImgUploadButton;\n","import styled from \"styled-components\";\n\nimport {\n  CONTAINER_MARGIN_BOTTOM,\n  LABEL_WIDTH,\n  INPUT_PADDING,\n  INPUT_WIDTH,\n} from \"Assets/Style/Constants\";\n\nimport Colors from \"Assets/Style/Colors\";\nimport { fontBold } from \"Assets/Style/Fonts\";\n\nexport const Container = styled.div`\n  display: flex;\n  margin-bottom: ${CONTAINER_MARGIN_BOTTOM};\n`;\n\nexport const ButtonsContainer = styled.div`\n  display: flex;\n  width: 70%;\n  justify-content: space-around;\n  margin-top: ${CONTAINER_MARGIN_BOTTOM};\n`;\n\nexport const Label = styled.div`\n  padding: ${INPUT_PADDING};\n  display: flex;\n  align-items: center;\n  font-weight: bold;\n  background-color: ${Colors.primary};\n  color: ${Colors.background};\n  width: ${LABEL_WIDTH};\n  ${fontBold};\n\n  &:before {\n    content: \" *\";\n    margin-right: 0.3em;\n    color: ${Colors.red};\n  }\n`;\n\nexport const ImageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: ${INPUT_WIDTH};\n  background-color: ${Colors.secondary};\n  padding: ${INPUT_PADDING};\n\n  > img {\n    max-width: 100%;\n    max-height: 50vh;\n  }\n`;\n\nexport const CropperContainer = styled.div`\n  position: relative;\n  height: 50vh;\n  width: 100%;\n`;\n","import React, { useState, useCallback } from \"react\";\nimport Cropper from \"react-easy-crop\";\nimport { Area } from \"react-easy-crop/types\";\n\nimport Button from \"../Button\";\nimport getCroppedImg from \"./cropImage\";\nimport ImgUploadButton from \"./ImgUploadButton\";\n\nimport {\n  Container,\n  Label,\n  ImageContainer,\n  ButtonsContainer,\n  CropperContainer,\n} from \"./style\";\n\ninterface IProps {\n  label: string;\n  buttonLabel: string;\n  buttonEditLabel: string;\n  buttonRemoveLabel: string;\n  buttonSelectLabel: string;\n  value: string;\n  setValue: (value: string) => void;\n}\n\nconst ProfileImage: React.FC<IProps> = ({\n  label,\n  buttonLabel,\n  buttonEditLabel,\n  buttonRemoveLabel,\n  buttonSelectLabel,\n  value,\n  setValue,\n}) => {\n  const [selectedImageBase64, setSelectedImageBase64] = useState<string>(\"\");\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\n  const [zoom, setZoom] = useState(1);\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState<Area>();\n\n  const onCrop = useCallback((croppedArea, croppedAreaPixels) => {\n    setCroppedAreaPixels(croppedAreaPixels);\n  }, []);\n\n  const onSelectImage = useCallback((target: HTMLInputElement) => {\n    if (!target.files || !target.files[0]) return;\n\n    const file = target.files[0];\n    const reader = new FileReader();\n\n    reader.addEventListener(\"load\", () => {\n      setSelectedImageBase64(reader.result as string);\n    });\n\n    reader.readAsDataURL(file);\n  }, []);\n\n  const onComplete = useCallback(async () => {\n    try {\n      const croppedImage = await getCroppedImg(\n        selectedImageBase64,\n        croppedAreaPixels as Area,\n      );\n      setValue(croppedImage);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [croppedAreaPixels, selectedImageBase64, setValue]);\n\n  const reset = useCallback(() => {\n    setSelectedImageBase64(\"\");\n    setValue(\"\");\n  }, [setValue]);\n\n  const edit = useCallback(() => {\n    setValue(\"\");\n  }, [setValue]);\n\n  const firstStageButtons = useCallback(() => {\n    const hasImageSelected = !!selectedImageBase64;\n    const hasImageCropped = !!value;\n\n    if (!hasImageSelected || hasImageCropped) return;\n\n    return (\n      <>\n        <Button\n          aria-label=\"Remove Profile Picture\"\n          name=\"removeProfileImage\"\n          onClick={reset}\n          type=\"button\"\n          color=\"red\"\n        >\n          {buttonRemoveLabel}\n        </Button>\n        <Button\n          aria-label=\"Select Profile Image\"\n          name=\"selectProfileImage\"\n          onClick={onComplete}\n          type=\"button\"\n        >\n          {buttonSelectLabel}\n        </Button>\n      </>\n    );\n  }, [\n    buttonRemoveLabel,\n    buttonSelectLabel,\n    onComplete,\n    reset,\n    selectedImageBase64,\n    value,\n  ]);\n\n  const secondStageButtons = useCallback(() => {\n    const hasImageCropped = !!value;\n\n    if (!hasImageCropped) return;\n\n    return (\n      <>\n        <Button\n          aria-label=\"Remove Profile Picture\"\n          name=\"removeProfileImage\"\n          onClick={reset}\n          type=\"button\"\n          color=\"red\"\n        >\n          {buttonRemoveLabel}\n        </Button>\n        <Button\n          aria-label=\"Edit Profile Picture\"\n          name=\"editProfileImage\"\n          onClick={edit}\n          type=\"button\"\n        >\n          {buttonEditLabel}\n        </Button>\n      </>\n    );\n  }, [buttonEditLabel, buttonRemoveLabel, edit, reset, value]);\n\n  return (\n    <Container>\n      <Label>{label}</Label>\n      <ImageContainer>\n        {!selectedImageBase64 && (\n          <ImgUploadButton label={buttonLabel} setValue={onSelectImage} />\n        )}\n        {selectedImageBase64 && !value && (\n          <CropperContainer>\n            <Cropper\n              image={selectedImageBase64}\n              crop={crop}\n              zoom={zoom}\n              onCropChange={setCrop}\n              onCropComplete={onCrop}\n              onZoomChange={setZoom}\n              aspect={1}\n            />\n          </CropperContainer>\n        )}\n        {value && <img src={value} alt=\"\" />}\n        {(selectedImageBase64 || value) && (\n          <ButtonsContainer>\n            {firstStageButtons()}\n            {secondStageButtons()}\n          </ButtonsContainer>\n        )}\n      </ImageContainer>\n    </Container>\n  );\n};\n\nexport default ProfileImage;\n","import styled from \"styled-components\";\n\nimport { INPUT_PADDING } from \"Assets/Style/Constants\";\n\nimport Colors from \"Assets/Style/Colors\";\nimport { fontBold } from \"Assets/Style/Fonts\";\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  margin-bottom: 0.5em;\n  overflow: hidden;\n  position: relative;\n\n  > div {\n    width: 100%;\n    height: 100%;\n  }\n`;\n\nexport const Label = styled.label<{ active: boolean }>`\n  text-align: center;\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  height: 100%;\n  padding: ${INPUT_PADDING};\n  z-index: 5;\n  background-color: ${({ active }) =>\n    active ? Colors.primary : Colors.secondary};\n  color: ${({ active }) => (active ? Colors.background : Colors.primary)};\n  font-weight: bold;\n  ${fontBold};\n`;\n\nexport const Input = styled.input`\n  display: none;\n`;\n","import React from \"react\";\n\nimport { Container, Label, Input } from \"./style\";\n\ninterface IProps {\n  name: string;\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  options: Array<{\n    value: string | number;\n    name: string;\n  }>;\n}\n\nconst Radio: React.FC<IProps> = ({ value, name, onChange, options }) => {\n  return (\n    <Container>\n      {options.map(option => (\n        <div key={option.value}>\n          <Label htmlFor={`${option.value}`} active={value === option.value}>\n            <span>{option.name}</span>\n          </Label>\n          <Input\n            type=\"radio\"\n            name={name}\n            value={option.value}\n            id={`${option.value}`}\n            onChange={onChange}\n          />\n        </div>\n      ))}\n    </Container>\n  );\n};\n\nexport default Radio;\n","import styled from \"styled-components\";\n\nimport {\n  CONTAINER_MARGIN_BOTTOM,\n  LABEL_WIDTH,\n  INPUT_WIDTH,\n  INPUT_PADDING,\n} from \"Assets/Style/Constants\";\n\nimport Colors from \"Assets/Style/Colors\";\nimport { fontBold, fontRegular } from \"Assets/Style/Fonts\";\n\ninterface ILabelProps {\n  required?: boolean;\n}\n\nexport const Container = styled.div`\n  margin-bottom: ${CONTAINER_MARGIN_BOTTOM};\n`;\n\nexport const InputContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  position: relative;\n  overflow: hidden;\n\n  > textarea {\n    background-color: ${Colors.secondary};\n    width: ${INPUT_WIDTH};\n    padding: ${INPUT_PADDING};\n    min-height: 7em;\n    ${fontRegular};\n\n    &:focus {\n      background-color: ${Colors.primary};\n      color: ${Colors.background};\n      border-left: 1px solid ${Colors.background};\n\n      &::placeholder {\n        color: transparent;\n      }\n    }\n  }\n`;\n\nexport const LabelContainer = styled.div`\n  background-color: ${Colors.primary};\n  width: ${LABEL_WIDTH};\n  display: flex;\n  align-items: center;\n`;\n\nexport const Label = styled.label<ILabelProps>`\n  display: flex;\n  margin: 0.5em;\n  color: ${Colors.background};\n  ${fontBold};\n\n  ${({ required }) =>\n    required &&\n    `\n    &:before {\n      content: \" *\";\n      margin-right: 0.3em;\n      color: ${Colors.red};\n    }\n  `}\n`;\n\nexport const ErrorContainer = styled.div`\n  width: 100%;\n  padding: ${INPUT_PADDING};\n  background-color: ${Colors.red};\n`;\n\nexport const Limit = styled.span<{ remaining: number }>`\n  color: ${({ remaining }) => (remaining >= 0 ? \"#817575\" : Colors.red)};\n  position: absolute;\n  right: 1rem;\n  bottom: 0.5rem;\n`;\n","import React, { useState } from \"react\";\nimport TextareaAutosize from \"react-textarea-autosize\";\n\nimport {\n  Container,\n  LabelContainer,\n  Label,\n  InputContainer,\n  ErrorContainer,\n  Limit,\n} from \"./style\";\n\ninterface IProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Para acessibilidade, todo input precisa de uma legenda, caso não queria\n   * que ela seja visível, utilize a prop isLabelVisible={false}\n   */\n  name: string;\n  label: string;\n  isRequired?: boolean;\n  errorMessage?: string;\n  limit?: number;\n  innerRef?: any;\n  containerStyle?: React.CSSProperties;\n}\n\nconst Textarea: React.FC<IProps> = props => {\n  const {\n    label,\n    innerRef,\n    errorMessage,\n    containerStyle,\n    isRequired,\n    placeholder,\n    limit,\n    name,\n    id,\n  } = props;\n\n  const [length, setLength] = useState<number>(0);\n\n  return (\n    <Container style={containerStyle}>\n      <InputContainer>\n        <LabelContainer>\n          <Label htmlFor={id} required={isRequired}>\n            {label}\n          </Label>\n        </LabelContainer>\n        <TextareaAutosize\n          name={name}\n          onChange={e => setLength(e.target.value.length)}\n          placeholder={placeholder || \"\"}\n          ref={innerRef}\n        />\n        {limit && <Limit remaining={limit - length}>{limit - length}</Limit>}\n      </InputContainer>\n      {errorMessage && (\n        <ErrorContainer>\n          <label>{errorMessage}</label>\n        </ErrorContainer>\n      )}\n    </Container>\n  );\n};\n\nexport default Textarea;\n","import styled from \"styled-components\";\n\nimport {\n  CONTAINER_MARGIN_BOTTOM,\n  INPUT_WIDTH,\n  LABEL_WIDTH,\n  INPUT_PADDING,\n} from \"Assets/Style/Constants\";\n\nimport Colors from \"Assets/Style/Colors\";\nimport { fontBold } from \"Assets/Style/Fonts\";\n\ninterface ILabelProps {\n  required?: boolean;\n}\n\nexport const Container = styled.div`\n  margin-bottom: ${CONTAINER_MARGIN_BOTTOM};\n`;\n\nexport const InputContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  position: relative;\n`;\n\nexport const LabelContainer = styled.div`\n  background-color: ${Colors.primary};\n  width: ${LABEL_WIDTH};\n  display: flex;\n  align-items: center;\n`;\n\nexport const Label = styled.label<ILabelProps>`\n  display: flex;\n  margin: 0.5em;\n  color: ${Colors.background};\n  ${fontBold};\n\n  ${({ required }) =>\n    required &&\n    `\n    &:before {\n      content: \" *\";\n      margin-right: 0.3em;\n      color: ${Colors.red};\n    }\n  `}\n`;\n\nexport const Input = styled.input`\n  padding: ${INPUT_PADDING};\n  background-color: ${Colors.secondary};\n  width: ${INPUT_WIDTH};\n\n  &:focus {\n    background-color: ${Colors.primary};\n    color: ${Colors.background};\n    border-left: 1px solid ${Colors.background};\n\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\nexport const ErrorContainer = styled.div`\n  width: 100%;\n  padding: ${INPUT_PADDING};\n  background-color: ${Colors.red};\n`;\n","import React from \"react\";\n\nimport {\n  Container,\n  LabelContainer,\n  Label,\n  InputContainer,\n  Input,\n  ErrorContainer,\n} from \"./style\";\n\ninterface IProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Para acessibilidade, todo input precisa de uma legenda, caso não queria\n   * que ela seja visível, utilize a prop isLabelVisible={false}\n   */\n  name: string;\n  label: string;\n  isRequired?: boolean;\n  errorMessage?: string;\n  innerRef?: any;\n  containerStyle?: React.CSSProperties;\n}\n\nconst TextInput: React.FC<IProps> = props => {\n  const {\n    label,\n    innerRef,\n    errorMessage,\n    containerStyle,\n    isRequired,\n    id,\n  } = props;\n\n  return (\n    <Container style={containerStyle}>\n      <InputContainer>\n        <LabelContainer>\n          <Label htmlFor={id} required={isRequired}>\n            {label}\n          </Label>\n        </LabelContainer>\n        <Input {...props} type=\"text\" ref={innerRef} />\n      </InputContainer>\n      {errorMessage && (\n        <ErrorContainer>\n          <label>{errorMessage}</label>\n        </ErrorContainer>\n      )}\n    </Container>\n  );\n};\n\nexport default TextInput;\n","export function captalizeFirst(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function captalizeAllFirst(str: string) {\n  return str\n    .split(\" \")\n    .map(str => captalizeFirst(str))\n    .join(\" \");\n}\n\nexport function removeNonNumeric(str: string) {\n  return str.replace(/\\D/g, \"\");\n}\n","import { IDate } from \"Assets/Languages/Dates\";\nimport { IForm } from \"Assets/Languages/Form\";\n\nexport const AllLangs = {\n  EN: \"English\",\n  BR: \"Português (Brasil)\",\n  ES: \"Español\",\n};\n\nexport type AllLangsOptions = keyof typeof AllLangs;\n\nexport interface ITranslations {\n  Form: IForm;\n  Date: IDate;\n}\n\nexport default AllLangs;\n","import AllLangs from \"Assets/Languages\";\n\nexport interface IForm {\n  reactResumeGenerator: string;\n  by: string;\n  name: string;\n  headline: string;\n  contact: string;\n  graduation: string;\n  portfolio: string;\n  competences: string;\n  languages: string;\n  observation: string;\n  salaryExpectation: string;\n  age: string;\n  about: string;\n  employment: string;\n  actualJob: string;\n  academic: string;\n  submit: string;\n  skills: string;\n  profilePicture: string;\n  uploadFile: string;\n  buttonRemove: string;\n  buttonEdit: string;\n  buttonSelect: string;\n}\n\nconst EN: IForm = {\n  reactResumeGenerator: \"react resume generator\",\n  by: \"by\",\n  name: \"name\",\n  headline: \"headline\",\n  contact: \"contact\",\n  graduation: \"graduation\",\n  portfolio: \"portfolio\",\n  competences: \"competences\",\n  languages: \"languages\",\n  observation: \"observations\",\n  salaryExpectation: \"salary expectation\",\n  age: \"age\",\n  about: \"about you\",\n  employment: \"employment history\",\n  actualJob: \"present\",\n  academic: \"academic formation\",\n  submit: \"submit\",\n  skills: \"skills separated by semicolon\",\n  profilePicture: \"profile picture\",\n  uploadFile: \"upload a image\",\n  buttonEdit: \"edit\",\n  buttonRemove: \"remove\",\n  buttonSelect: \"select\",\n};\n\nconst BR: IForm = {\n  reactResumeGenerator: \"Gerador de Currículos React\",\n  by: \"por\",\n  name: \"nome\",\n  headline: \"titúlo profissional\",\n  graduation: \"graduação\",\n  contact: \"contato\",\n  portfolio: \"portfólio\",\n  competences: \"competências\",\n  languages: \"idiomas\",\n  observation: \"obserações\",\n  salaryExpectation: \"pretensão salárial\",\n  age: \"idade\",\n  about: \"sobre você\",\n  employment: \"experiência profissional\",\n  actualJob: \"presente\",\n  academic: \"formação academica\",\n  submit: \"enviar\",\n  skills: \"competências separadas por ponto e virgula\",\n  profilePicture: \"Foto de Perfil\",\n  uploadFile: \"upload de imagem\",\n  buttonEdit: \"editar\",\n  buttonRemove: \"remover\",\n  buttonSelect: \"selecionar\",\n};\n\nconst ES: IForm = {\n  reactResumeGenerator: \"generadora de currículum react\",\n  by: \"por\",\n  name: \"nombre\",\n  headline: \"título profesional\",\n  contact: \"contacto\",\n  graduation: \"graduación\",\n  portfolio: \"portafolio\",\n  competences: \"competencias\",\n  languages: \"idiomas\",\n  observation: \"observaciones\",\n  salaryExpectation: \"expectativa salarial\",\n  age: \"años\",\n  about: \"acerca de ti\",\n  employment: \"historial de empleo\",\n  actualJob: \"presente\",\n  academic: \"formación académica\",\n  submit: \"enviar\",\n  skills: \"competencias separadas por punto y coma\",\n  profilePicture: \"foto de perfil\",\n  uploadFile: \"upload una imagen\",\n  buttonEdit: \"editar\",\n  buttonRemove: \"eliminar\",\n  buttonSelect: \"seleccione\",\n};\n\nconst Form: { [T in keyof typeof AllLangs]: IForm } = {\n  EN,\n  BR,\n  ES,\n};\n\nexport default Form;\n","import React, { useCallback, useState, useMemo } from \"react\";\nimport { useForm } from \"react-hook-form\";\n\nimport Button from \"Components/Button\";\nimport Image from \"Components/Image\";\nimport Radio from \"Components/Radio\";\nimport Textarea from \"Components/Textarea\";\nimport TextInput from \"Components/TextInput\";\n\nimport {\n  captalizeFirst,\n  captalizeAllFirst,\n  removeNonNumeric,\n} from \"Utils/String\";\n\nimport { AllLangs, AllLangsOptions } from \"Assets/Languages\";\nimport Form from \"Assets/Languages/Form\";\n\nimport { Container, Header, FormContainer, ButtonContainer } from \"./style\";\n\ntype AllowedCurrencies = \"USD\" | \"BRL\" | \"EUR\";\n\nconst currencyOptions = [\n  {\n    name: \"USD ($)\",\n    value: \"USD\",\n  },\n  {\n    name: \"BRL (R$)\",\n    value: \"BRL\",\n  },\n  {\n    name: \"EUR (€)\",\n    value: \"EUR\",\n  },\n];\n\nconst View: React.FC = () => {\n  const { register, handleSubmit, setValue, errors } = useForm();\n  const [language, setLanguage] = useState<AllLangsOptions>(\"EN\");\n  const [currency, setCurrency] = useState<AllowedCurrencies>(\"USD\");\n  const [profilePicture, setProfilePicture] = useState<string>(\"\");\n\n  const onSubmit = useCallback((data: any) => {\n    console.log(data);\n  }, []);\n\n  const formatAge = useCallback(\n    (age: string) => {\n      let formatted = removeNonNumeric(age);\n\n      if (formatted.length > 3) {\n        formatted = formatted.substr(0, 3);\n      }\n\n      setValue(\"age\", formatted);\n    },\n    [setValue],\n  );\n\n  const getLanguagesOptions = useMemo(() => {\n    const allLangsOptions = [];\n\n    for (const lang in AllLangs) {\n      allLangsOptions.push({\n        name: AllLangs[lang as AllLangsOptions],\n        value: lang,\n      });\n    }\n\n    return allLangsOptions;\n  }, []);\n\n  return (\n    <Container>\n      <Header>\n        <h1>{captalizeAllFirst(Form[language].reactResumeGenerator)}</h1>\n      </Header>\n      <FormContainer onSubmit={handleSubmit(onSubmit)}>\n        <Radio\n          name=\"language\"\n          value={language}\n          onChange={e => setLanguage(e.target.value as AllLangsOptions)}\n          options={getLanguagesOptions}\n        />\n        <Radio\n          name=\"currency\"\n          value={currency}\n          onChange={e => setCurrency(e.target.value as AllowedCurrencies)}\n          options={currencyOptions}\n        />\n        <Image\n          label={captalizeAllFirst(Form[language].profilePicture)}\n          buttonLabel={captalizeFirst(Form[language].uploadFile)}\n          buttonEditLabel={captalizeFirst(Form[language].buttonEdit)}\n          buttonRemoveLabel={captalizeFirst(Form[language].buttonRemove)}\n          buttonSelectLabel={captalizeFirst(Form[language].buttonSelect)}\n          value={profilePicture}\n          setValue={setProfilePicture}\n        />\n        <TextInput\n          isRequired\n          label={captalizeAllFirst(Form[language].name)}\n          name=\"name\"\n          innerRef={register({\n            required: true,\n          })}\n          errorMessage={errors.name && \"This Field Is Required.\"}\n        />\n        <TextInput\n          isRequired\n          label={captalizeAllFirst(Form[language].headline)}\n          name=\"headline\"\n          innerRef={register({\n            required: true,\n          })}\n          errorMessage={errors.name && \"This Field Is Required.\"}\n        />\n        <TextInput\n          label={captalizeAllFirst(Form[language].age)}\n          name=\"age\"\n          onChange={e => formatAge(e.target.value)}\n          innerRef={register()}\n        />\n        <TextInput\n          label={captalizeAllFirst(Form[language].graduation)}\n          name=\"gaduation\"\n          innerRef={register()}\n        />\n        <Textarea\n          isRequired\n          label={captalizeAllFirst(Form[language].about)}\n          name=\"about\"\n          innerRef={register({\n            required: true,\n          })}\n          errorMessage={errors.name && \"This Field Is Required.\"}\n        />\n        <TextInput\n          label={captalizeAllFirst(Form[language].salaryExpectation)}\n          name=\"salaryExpectation\"\n          onChange={e =>\n            setValue(\"salaryExpectation\", removeNonNumeric(e.target.value))\n          }\n          innerRef={register()}\n        />\n        <TextInput\n          isRequired\n          label={captalizeAllFirst(Form[language].skills)}\n          name=\"skills\"\n          innerRef={register({\n            required: true,\n          })}\n        />\n        <ButtonContainer>\n          <Button aria-label=\"submit\">\n            {captalizeAllFirst(Form[language].submit)}\n          </Button>\n        </ButtonContainer>\n      </FormContainer>\n    </Container>\n  );\n};\n\nexport default View;\n","import styled from \"styled-components\";\n\nimport Colors from \"Assets/Style/Colors\";\nimport { fontBold } from \"Assets/Style/Fonts\";\n\nexport const Container = styled.div`\n  padding: 1em 0;\n  width: 100vw;\n  min-height: 100vh;\n  background-color: ${Colors.background};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Header = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin: 1em 0;\n  ${fontBold};\n\n  > h1 {\n    font-size: 3em;\n  }\n\n  > span {\n    text-align: right;\n  }\n`;\n\nexport const FormContainer = styled.form`\n  width: 50vw;\n  padding: 1em;\n\n  > h1 {\n    text-align: center;\n    margin-bottom: 2em;\n    text-transform: uppercase;\n  }\n\n  @media (max-width: 900px) {\n    width: 100vw;\n  }\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n","export const fontRegular = \"font-family: MontserratRegular, sans-serif\";\n\nexport const fontRegularItalic =\n  \"font-family: MontserratRegularItalic, sans-serif\";\n\nexport const fontBoldItalic = \"font-family: MontserratBoldItalic, sans-serif\";\n\nexport const fontBold = \"font-family: MontserratBold, sans-serif\";\n"],"sourceRoot":""}