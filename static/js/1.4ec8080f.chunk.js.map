{"version":3,"sources":["Components/ArrayInputs/style.ts","Assets/Style/Constants.ts","Components/ArrayInputs/index.tsx","Components/Button/style.ts","Components/Button/index.tsx","Components/Image/cropImage.ts","Components/Image/ImgUploadButton/style.ts","Components/Image/ImgUploadButton/index.tsx","Components/Image/style.ts","Components/Image/index.tsx","Components/Radio/style.ts","Components/Radio/index.tsx","Components/Textarea/style.ts","Components/Textarea/index.tsx","Components/TextInput/style.ts","Components/TextInput/index.tsx","Utils/String.ts","Utils/Validate.ts","Views/Home/index.tsx","Views/Home/style.ts","Assets/Style/Fonts.ts"],"names":["Container","styled","div","Label","Colors","primary","background","fontBold","InputsContainer","InputContainer","Input","input","secondary","Button","button","color","React","memo","label","inputs","setValue","addField","removeField","map","value","index","key","onChange","e","target","type","onClick","props","children","createImage","url","a","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getCroppedImg","imageSrc","pixelCrop","canvas","document","createElement","ctx","getContext","maxSize","Math","max","width","height","safeArea","sqrt","translate","drawImage","data","getImageData","putImageData","x","y","toDataURL","aria-label","name","disabled","ButtonsContainer","red","ImageContainer","CropperContainer","buttonLabel","buttonEditLabel","buttonRemoveLabel","buttonSelectLabel","useState","selectedImageBase64","setSelectedImageBase64","crop","setCrop","zoom","setZoom","croppedAreaPixels","setCroppedAreaPixels","onCrop","useCallback","croppedArea","onSelectImage","files","file","reader","FileReader","result","readAsDataURL","onComplete","croppedImage","console","reset","edit","firstStageButtons","secondStageButtons","onCropChange","onCropComplete","onZoomChange","aspect","alt","Fieldset","fieldset","options","option","id","checked","htmlFor","fontRegular","LabelContainer","required","ErrorContainer","Limit","span","remaining","innerRef","errorMessage","containerStyle","isRequired","placeholder","limit","length","setLength","style","ref","removeNonNumeric","str","replace","LINKEDIN_PROFILE_REGEX","RegExp","EMAIL_REGEX","currencyOptions","View","language","useGlobalState","dispatch","useDispatch","FormLanguage","useLanguage","ErrorsLanguage","useForm","register","handleSubmit","errors","currency","setCurrency","profilePicture","setProfilePicture","skills","setSkills","languages","setLanguages","onSubmit","log","formatAge","age","formatted","substr","getLanguagesOptions","useMemo","allLangsOptions","lang","AllLangs","push","changeArrayFieldValue","newSkills","slice","newLanguages","addArrayField","newLanguage","removeArrayField","splice","reactResumeGenerator","GlobalActions","setLanguage","uploadFile","buttonEdit","buttonRemove","buttonSelect","headline","about","phone","graduation","validate","email","test","invalidEmail","message","profile","invalidLinkedin","linkedin","salaryExpectation","competences","submit","Header","h1","FormContainer","form","ButtonContainer"],"mappings":"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","file":"static/js/1.4ec8080f.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nimport {\n  CONTAINER_MARGIN_BOTTOM,\n  INPUT_WIDTH,\n  LABEL_WIDTH,\n  INPUT_PADDING,\n} from \"Assets/Style/Constants\";\n\nimport Colors from \"Assets/Style/Colors\";\nimport { fontBold } from \"Assets/Style/Fonts\";\n\nexport const Container = styled.div`\n  display: flex;\n  margin-bottom: ${CONTAINER_MARGIN_BOTTOM};\n`;\n\nexport const Label = styled.div`\n  display: flex;\n  align-items: center;\n  font-weight: bold;\n  background-color: ${Colors.primary};\n  color: ${Colors.background};\n  width: ${LABEL_WIDTH};\n  padding: ${INPUT_PADDING};\n  ${fontBold};\n`;\n\nexport const InputsContainer = styled.div`\n  width: ${INPUT_WIDTH};\n\n  > div {\n    margin-bottom: ${CONTAINER_MARGIN_BOTTOM};\n\n    &:last-child {\n      margin-bottom: 0;\n    }\n  }\n`;\n\nexport const InputContainer = styled.div`\n  display: flex;\n`;\n\nexport const Input = styled.input`\n  background-color: ${Colors.secondary};\n  padding: ${INPUT_PADDING};\n  width: 80%;\n\n  &:focus {\n    background-color: ${Colors.primary};\n    color: ${Colors.background};\n    border-left: 1px solid ${Colors.background};\n\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\nexport const Button = styled.button<{ color: keyof typeof Colors }>`\n  font-size: 0.8em;\n  padding: 0.2em 0.5em;\n  width: 20%;\n  font-weight: bold;\n  border: 0.3em solid ${({ color }) => Colors[color]};\n  color: ${({ color }) => Colors[color]};\n\n  &:focus,\n  &:hover {\n    background-color: ${({ color }) => Colors[color]};\n    color: ${Colors.secondary};\n  }\n`;\n","export const LABEL_WIDTH = \"30%\";\n\nexport const INPUT_WIDTH = \"70%\";\n\nexport const INPUT_PADDING = \"0.5em 0.7em\";\nexport const BUTTON_PADDING = \"0.5rem 1rem\";\nexport const BUTTON_BORDER_SIZE = \"0.3rem\";\n\nexport const CONTAINER_MARGIN_BOTTOM = \"0.5em\";\n","import React from \"react\";\n\nimport {\n  Container,\n  Label,\n  InputsContainer,\n  InputContainer,\n  Button,\n  Input,\n} from \"./style\";\n\ninterface IProps {\n  label: string;\n  inputs: Array<string>;\n  setValue: (index: number, value: string) => void;\n  addField: () => void;\n  removeField: (index: number) => void;\n}\n\nconst ArrayInputs: React.FC<IProps> = ({\n  label,\n  inputs,\n  setValue,\n  addField,\n  removeField,\n}) => {\n  return (\n    <Container>\n      <Label>{label}</Label>\n      <InputsContainer>\n        {inputs.map((value, index) => (\n          <InputContainer key={index}>\n            <Input\n              value={value}\n              onChange={e => setValue(index, e.target.value)}\n            />\n            {index !== 0 && (\n              <Button\n                color=\"red\"\n                type=\"button\"\n                onClick={() => removeField(index)}\n              >\n                Remove\n              </Button>\n            )}\n            {index === 0 && (\n              <Button color=\"green\" type=\"button\" onClick={() => addField()}>\n                Add\n              </Button>\n            )}\n          </InputContainer>\n        ))}\n      </InputsContainer>\n    </Container>\n  );\n};\n\nexport default React.memo(ArrayInputs);\n","import styled from \"styled-components\";\n\nimport { BUTTON_PADDING, BUTTON_BORDER_SIZE } from \"Assets/Style/Constants\";\n\nimport Colors, { ColorsType } from \"Assets/Style/Colors\";\nimport { fontBold } from \"Assets/Style/Fonts\";\n\nexport const Container = styled.button<{ color: ColorsType }>`\n  padding: ${BUTTON_PADDING};\n  transition: all 0.15s ease-in-out;\n  border: ${BUTTON_BORDER_SIZE} solid ${({ color }) => Colors[color]};\n  color: ${({ color }) => Colors[color]};\n  ${fontBold};\n\n  &:focus,\n  &:hover {\n    background-color: ${({ color }) => Colors[color]};\n    color: ${Colors.background};\n  }\n`;\n","import React from \"react\";\n\nimport { ColorsType } from \"Assets/Style/Colors\";\n\nimport { Container } from \"./style\";\n\ninterface IProps extends React.ButtonHTMLAttributes<HTMLButtonElement> {\n  color?: ColorsType;\n  \"aria-label\": string;\n}\n\nconst Button: React.FC<IProps> = props => {\n  return (\n    <Container color={props.color || \"primary\"} {...props}>\n      {props.children}\n    </Container>\n  );\n};\n\nexport default React.memo(Button);\n","import { Area } from \"react-easy-crop/types\";\n\nconst createImage = async (url: string) => {\n  const image = await new Promise((resolve, reject) => {\n    const image = new Image();\n    image.addEventListener(\"load\", () => resolve(image));\n    image.addEventListener(\"error\", error => reject(error));\n    image.setAttribute(\"crossOrigin\", \"anonymous\"); // needed to avoid cross-origin issues on CodeSandbox\n    image.src = url;\n  });\n\n  return image as HTMLImageElement;\n};\n\n/**\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\n * @param {File} image - Image File url\n * @param {Object} pixelCrop - pixelCrop Object provided by react-easy-crop\n */\nexport default async function getCroppedImg(imageSrc: string, pixelCrop: Area) {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n  const maxSize = Math.max(image.width, image.height);\n  const safeArea = 2 * ((maxSize / 2) * Math.sqrt(2));\n\n  // set each dimensions to double largest dimension to allow for a safe area for the\n  // image to rotate in without being clipped by canvas context\n  canvas.width = safeArea;\n  canvas.height = safeArea;\n\n  // translate canvas context to a central location on image to allow rotating around the center.\n  ctx.translate(safeArea / 2, safeArea / 2);\n  ctx.translate(-safeArea / 2, -safeArea / 2);\n\n  // draw rotated image and store data.\n  ctx.drawImage(\n    image,\n    safeArea / 2 - image.width * 0.5,\n    safeArea / 2 - image.height * 0.5,\n  );\n  const data = ctx.getImageData(0, 0, safeArea, safeArea);\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height;\n\n  // paste generated rotate image with correct offsets for x,y crop values.\n  ctx.putImageData(\n    data,\n    0 - safeArea / 2 + image.width * 0.5 - pixelCrop.x,\n    0 - safeArea / 2 + image.height * 0.5 - pixelCrop.y,\n  );\n\n  return canvas.toDataURL(\"image/jpeg\");\n}\n","import styled from \"styled-components\";\n\nimport { BUTTON_PADDING } from \"Assets/Style/Constants\";\n\nimport Colors from \"Assets/Style/Colors\";\n\nexport const Container = styled.div`\n  position: relative;\n  overflow: hidden;\n  cursor: pointer;\n`;\n\nexport const Input = styled.input`\n  position: absolute;\n  top: 0;\n  left: 0;\n  opacity: 0;\n  padding: ${BUTTON_PADDING};\n  cursor: pointer;\n\n  &::-webkit-file-upload-button {\n    cursor: pointer;\n  }\n\n  &:hover + button,\n  &:focus + button {\n    background-color: ${Colors.primary};\n    color: ${Colors.background};\n  }\n`;\n","import React from \"react\";\n\nimport Button from \"Components/Button\";\n\nimport { Container, Input } from \"./style\";\n\ninterface IProps {\n  label: string;\n  setValue: (target: EventTarget & HTMLInputElement) => void;\n}\n\nconst ImgUploadButton: React.FC<IProps> = ({ label, setValue }) => (\n  <Container>\n    <Input\n      aria-label={label}\n      type=\"file\"\n      name=\"myfile\"\n      onChange={e => setValue(e.target)}\n    />\n    <Button type=\"button\" aria-label={label} disabled>\n      {label}\n    </Button>\n  </Container>\n);\n\nexport default React.memo(ImgUploadButton);\n","import styled from \"styled-components\";\n\nimport {\n  CONTAINER_MARGIN_BOTTOM,\n  LABEL_WIDTH,\n  INPUT_PADDING,\n  INPUT_WIDTH,\n} from \"Assets/Style/Constants\";\n\nimport Colors from \"Assets/Style/Colors\";\nimport { fontBold } from \"Assets/Style/Fonts\";\n\nexport const Container = styled.div`\n  display: flex;\n  margin-bottom: ${CONTAINER_MARGIN_BOTTOM};\n`;\n\nexport const ButtonsContainer = styled.div`\n  display: flex;\n  width: 70%;\n  justify-content: space-around;\n  margin-top: ${CONTAINER_MARGIN_BOTTOM};\n`;\n\nexport const Label = styled.div`\n  padding: ${INPUT_PADDING};\n  display: flex;\n  align-items: center;\n  font-weight: bold;\n  background-color: ${Colors.primary};\n  color: ${Colors.background};\n  width: ${LABEL_WIDTH};\n  ${fontBold};\n\n  &:before {\n    content: \" *\";\n    margin-right: 0.3em;\n    color: ${Colors.red};\n  }\n`;\n\nexport const ImageContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  width: ${INPUT_WIDTH};\n  background-color: ${Colors.secondary};\n  padding: ${INPUT_PADDING};\n\n  > img {\n    max-width: 100%;\n    max-height: 50vh;\n  }\n`;\n\nexport const CropperContainer = styled.div`\n  position: relative;\n  height: 50vh;\n  width: 100%;\n`;\n","import React, { useState, useCallback } from \"react\";\nimport Cropper from \"react-easy-crop\";\nimport { Area } from \"react-easy-crop/types\";\n\nimport Button from \"../Button\";\nimport getCroppedImg from \"./cropImage\";\nimport ImgUploadButton from \"./ImgUploadButton\";\n\nimport {\n  Container,\n  Label,\n  ImageContainer,\n  ButtonsContainer,\n  CropperContainer,\n} from \"./style\";\n\ninterface IProps {\n  label: string;\n  buttonLabel: string;\n  buttonEditLabel: string;\n  buttonRemoveLabel: string;\n  buttonSelectLabel: string;\n  value: string;\n  setValue: (value: string) => void;\n}\n\nconst ProfileImage: React.FC<IProps> = ({\n  label,\n  buttonLabel,\n  buttonEditLabel,\n  buttonRemoveLabel,\n  buttonSelectLabel,\n  value,\n  setValue,\n}) => {\n  const [selectedImageBase64, setSelectedImageBase64] = useState<string>(\"\");\n  const [crop, setCrop] = useState({ x: 0, y: 0 });\n  const [zoom, setZoom] = useState(1);\n  const [croppedAreaPixels, setCroppedAreaPixels] = useState<Area>();\n\n  const onCrop = useCallback((croppedArea, croppedAreaPixels) => {\n    setCroppedAreaPixels(croppedAreaPixels);\n  }, []);\n\n  const onSelectImage = useCallback((target: HTMLInputElement) => {\n    if (!target.files || !target.files[0]) return;\n\n    const file = target.files[0];\n    const reader = new FileReader();\n\n    reader.addEventListener(\"load\", () => {\n      setSelectedImageBase64(reader.result as string);\n    });\n\n    reader.readAsDataURL(file);\n  }, []);\n\n  const onComplete = useCallback(async () => {\n    try {\n      const croppedImage = await getCroppedImg(\n        selectedImageBase64,\n        croppedAreaPixels as Area,\n      );\n      setValue(croppedImage);\n    } catch (e) {\n      console.error(e);\n    }\n  }, [croppedAreaPixels, selectedImageBase64, setValue]);\n\n  const reset = useCallback(() => {\n    setSelectedImageBase64(\"\");\n    setValue(\"\");\n  }, [setValue]);\n\n  const edit = useCallback(() => {\n    setValue(\"\");\n  }, [setValue]);\n\n  const firstStageButtons = useCallback(() => {\n    const hasImageSelected = !!selectedImageBase64;\n    const hasImageCropped = !!value;\n\n    if (!hasImageSelected || hasImageCropped) return;\n\n    return (\n      <>\n        <Button\n          aria-label=\"Remove Profile Picture\"\n          name=\"removeProfileImage\"\n          onClick={reset}\n          type=\"button\"\n          color=\"red\"\n        >\n          {buttonRemoveLabel}\n        </Button>\n        <Button\n          aria-label=\"Select Profile Image\"\n          name=\"selectProfileImage\"\n          onClick={onComplete}\n          type=\"button\"\n        >\n          {buttonSelectLabel}\n        </Button>\n      </>\n    );\n  }, [\n    buttonRemoveLabel,\n    buttonSelectLabel,\n    onComplete,\n    reset,\n    selectedImageBase64,\n    value,\n  ]);\n\n  const secondStageButtons = useCallback(() => {\n    const hasImageCropped = !!value;\n\n    if (!hasImageCropped) return;\n\n    return (\n      <>\n        <Button\n          aria-label=\"Remove Profile Picture\"\n          name=\"removeProfileImage\"\n          onClick={reset}\n          type=\"button\"\n          color=\"red\"\n        >\n          {buttonRemoveLabel}\n        </Button>\n        <Button\n          aria-label=\"Edit Profile Picture\"\n          name=\"editProfileImage\"\n          onClick={edit}\n          type=\"button\"\n        >\n          {buttonEditLabel}\n        </Button>\n      </>\n    );\n  }, [buttonEditLabel, buttonRemoveLabel, edit, reset, value]);\n\n  return (\n    <Container>\n      <Label>{label}</Label>\n      <ImageContainer>\n        {!selectedImageBase64 && (\n          <ImgUploadButton label={buttonLabel} setValue={onSelectImage} />\n        )}\n        {selectedImageBase64 && !value && (\n          <CropperContainer>\n            <Cropper\n              image={selectedImageBase64}\n              crop={crop}\n              zoom={zoom}\n              onCropChange={setCrop}\n              onCropComplete={onCrop}\n              onZoomChange={setZoom}\n              aspect={1}\n            />\n          </CropperContainer>\n        )}\n        {value && <img src={value} alt=\"\" />}\n        {(selectedImageBase64 || value) && (\n          <ButtonsContainer>\n            {firstStageButtons()}\n            {secondStageButtons()}\n          </ButtonsContainer>\n        )}\n      </ImageContainer>\n    </Container>\n  );\n};\n\nexport default React.memo(ProfileImage);\n","import styled from \"styled-components\";\n\nimport { INPUT_PADDING } from \"Assets/Style/Constants\";\n\nimport Colors from \"Assets/Style/Colors\";\nimport { fontBold } from \"Assets/Style/Fonts\";\n\nexport const Fieldset = styled.fieldset`\n  > legend {\n    font-weight: bold;\n    width: 100%;\n    background-color: ${Colors.primary};\n    color: ${Colors.background};\n    padding: ${INPUT_PADDING};\n    ${fontBold};\n  }\n`;\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: space-around;\n  align-items: center;\n  margin-bottom: 0.5em;\n  overflow: hidden;\n  position: relative;\n\n  > div {\n    width: 100%;\n  }\n`;\n\nexport const Label = styled.label`\n  text-align: center;\n  cursor: pointer;\n  display: block;\n  width: 100%;\n  height: 100%;\n  padding: ${INPUT_PADDING};\n  z-index: 5;\n  background-color: ${Colors.secondary};\n  color: ${Colors.primary};\n  font-weight: bold;\n  ${fontBold};\n`;\n\nexport const Input = styled.input`\n  display: none;\n\n  &:checked + label,\n  &:hover + label,\n  &:focus + label {\n    background-color: ${Colors.primary};\n    color: ${Colors.background};\n    border-top: 1px solid ${Colors.secondary};\n  }\n`;\n","import React from \"react\";\n\nimport { Fieldset, Container, Label, Input } from \"./style\";\n\ninterface IProps {\n  label: string;\n  name: string;\n  value: string;\n  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;\n  options: Array<{\n    value: string | number;\n    name: string;\n  }>;\n}\n\nconst Radio: React.FC<IProps> = ({ label, value, name, onChange, options }) => {\n  return (\n    <Fieldset>\n      <legend>{label}</legend>\n      <Container>\n        {options.map(option => (\n          <div key={option.value}>\n            <Input\n              aria-label={option.name}\n              type=\"radio\"\n              name={name}\n              value={option.value}\n              id={`${option.value}`}\n              onChange={onChange}\n              checked={value === option.value}\n            />\n            <Label htmlFor={`${option.value}`}>\n              <span>{option.name}</span>\n            </Label>\n          </div>\n        ))}\n      </Container>\n    </Fieldset>\n  );\n};\n\nexport default React.memo(Radio);\n","import styled from \"styled-components\";\n\nimport {\n  CONTAINER_MARGIN_BOTTOM,\n  LABEL_WIDTH,\n  INPUT_WIDTH,\n  INPUT_PADDING,\n} from \"Assets/Style/Constants\";\n\nimport Colors from \"Assets/Style/Colors\";\nimport { fontBold, fontRegular } from \"Assets/Style/Fonts\";\n\ninterface ILabelProps {\n  required?: boolean;\n}\n\nexport const Container = styled.div`\n  margin-bottom: ${CONTAINER_MARGIN_BOTTOM};\n`;\n\nexport const InputContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  position: relative;\n  overflow: hidden;\n\n  > textarea {\n    background-color: ${Colors.secondary};\n    width: ${INPUT_WIDTH};\n    padding: ${INPUT_PADDING};\n    min-height: 7em;\n    ${fontRegular};\n\n    &:focus {\n      background-color: ${Colors.primary};\n      color: ${Colors.background};\n      border-left: 1px solid ${Colors.secondary};\n\n      &::placeholder {\n        color: transparent;\n      }\n    }\n  }\n`;\n\nexport const LabelContainer = styled.div`\n  background-color: ${Colors.primary};\n  width: ${LABEL_WIDTH};\n  display: flex;\n  align-items: center;\n`;\n\nexport const Label = styled.label<ILabelProps>`\n  display: flex;\n  margin: 0.5em;\n  color: ${Colors.background};\n  ${fontBold};\n\n  ${({ required }) =>\n    required &&\n    `\n    &:before {\n      content: \" *\";\n      margin-right: 0.3em;\n      color: ${Colors.red};\n    }\n  `}\n`;\n\nexport const ErrorContainer = styled.div`\n  width: 100%;\n  padding: ${INPUT_PADDING};\n  background-color: ${Colors.red};\n`;\n\nexport const Limit = styled.span<{ remaining: number }>`\n  color: ${({ remaining }) => (remaining >= 0 ? \"#817575\" : Colors.red)};\n  position: absolute;\n  right: 1rem;\n  bottom: 0.5rem;\n`;\n","import React, { useState } from \"react\";\nimport TextareaAutosize from \"react-textarea-autosize\";\n\nimport {\n  Container,\n  LabelContainer,\n  Label,\n  InputContainer,\n  ErrorContainer,\n  Limit,\n} from \"./style\";\n\ninterface IProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Para acessibilidade, todo input precisa de uma legenda, caso não queria\n   * que ela seja visível, utilize a prop isLabelVisible={false}\n   */\n  name: string;\n  label: string;\n  isRequired?: boolean;\n  errorMessage?: string;\n  limit?: number;\n  innerRef?: any;\n  containerStyle?: React.CSSProperties;\n}\n\nconst Textarea: React.FC<IProps> = props => {\n  const {\n    label,\n    innerRef,\n    errorMessage,\n    containerStyle,\n    isRequired,\n    placeholder,\n    limit,\n    name,\n    id,\n  } = props;\n\n  const [length, setLength] = useState<number>(0);\n\n  return (\n    <Container style={containerStyle}>\n      <InputContainer>\n        <LabelContainer>\n          <Label htmlFor={id} required={isRequired}>\n            {label}\n          </Label>\n        </LabelContainer>\n        <TextareaAutosize\n          name={name}\n          onChange={e => setLength(e.target.value.length)}\n          placeholder={placeholder || \"\"}\n          ref={innerRef}\n        />\n        {limit && <Limit remaining={limit - length}>{limit - length}</Limit>}\n      </InputContainer>\n      {errorMessage && (\n        <ErrorContainer>\n          <label>{errorMessage}</label>\n        </ErrorContainer>\n      )}\n    </Container>\n  );\n};\n\nexport default React.memo(Textarea);\n","import styled from \"styled-components\";\n\nimport {\n  CONTAINER_MARGIN_BOTTOM,\n  INPUT_WIDTH,\n  LABEL_WIDTH,\n  INPUT_PADDING,\n} from \"Assets/Style/Constants\";\n\nimport Colors from \"Assets/Style/Colors\";\nimport { fontBold } from \"Assets/Style/Fonts\";\n\ninterface ILabelProps {\n  required?: boolean;\n}\n\nexport const Container = styled.div`\n  margin-bottom: ${CONTAINER_MARGIN_BOTTOM};\n`;\n\nexport const InputContainer = styled.div`\n  display: flex;\n  flex-direction: row;\n  position: relative;\n`;\n\nexport const LabelContainer = styled.div`\n  background-color: ${Colors.primary};\n  width: ${LABEL_WIDTH};\n  display: flex;\n  align-items: center;\n`;\n\nexport const Label = styled.label<ILabelProps>`\n  display: flex;\n  margin: 0.5em;\n  color: ${Colors.background};\n  ${fontBold};\n\n  ${({ required }) =>\n    required &&\n    `\n    &:before {\n      content: \" *\";\n      margin-right: 0.3em;\n      color: ${Colors.red};\n    }\n  `}\n`;\n\nexport const Input = styled.input`\n  background-color: ${Colors.secondary};\n  padding: ${INPUT_PADDING};\n  width: ${INPUT_WIDTH};\n\n  &:focus {\n    background-color: ${Colors.primary};\n    color: ${Colors.background};\n    border-left: 1px solid ${Colors.secondary};\n\n    &::placeholder {\n      color: transparent;\n    }\n  }\n`;\n\nexport const ErrorContainer = styled.div`\n  width: 100%;\n  padding: ${INPUT_PADDING};\n  background-color: ${Colors.red};\n`;\n","import React from \"react\";\n\nimport {\n  Container,\n  LabelContainer,\n  Label,\n  InputContainer,\n  Input,\n  ErrorContainer,\n} from \"./style\";\n\ninterface IProps extends React.InputHTMLAttributes<HTMLInputElement> {\n  /**\n   * Para acessibilidade, todo input precisa de uma legenda, caso não queria\n   * que ela seja visível, utilize a prop isLabelVisible={false}\n   */\n  name: string;\n  label: string;\n  isRequired?: boolean;\n  errorMessage?: string;\n  innerRef?: any;\n  containerStyle?: React.CSSProperties;\n}\n\nconst TextInput: React.FC<IProps> = props => {\n  const {\n    label,\n    innerRef,\n    errorMessage,\n    containerStyle,\n    isRequired,\n    id,\n  } = props;\n\n  return (\n    <Container style={containerStyle}>\n      <InputContainer>\n        <LabelContainer>\n          <Label htmlFor={id} required={isRequired}>\n            {label}\n          </Label>\n        </LabelContainer>\n        <Input {...props} type=\"text\" ref={innerRef} />\n      </InputContainer>\n      {errorMessage && (\n        <ErrorContainer>\n          <label>{errorMessage}</label>\n        </ErrorContainer>\n      )}\n    </Container>\n  );\n};\n\nexport default React.memo(TextInput);\n","export function captalizeFirst(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nexport function captalizeAllFirst(str: string) {\n  return str\n    .split(\" \")\n    .map(str => captalizeFirst(str))\n    .join(\" \");\n}\n\nexport function removeNonNumeric(str: string) {\n  return str.replace(/\\D/g, \"\");\n}\n","const LINKEDIN_PROFILE_REGEX = new RegExp(\n  \"^https?://((www|ww).)?linkedin.com/((in/[^/]+/?)|(pub/[^/]+/((w|d)+/?){3}))$\",\n);\n\nconst EMAIL_REGEX = /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nexport function isValidLinkedinProfile(profile: string) {\n  return LINKEDIN_PROFILE_REGEX.test(profile);\n}\n\nexport function isValidEmail(email: string) {\n  return EMAIL_REGEX.test(email);\n}\n","import React, { useCallback, useState, useMemo } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useDispatch } from \"react-redux\";\n\nimport ArrayInputs from \"Components/ArrayInputs\";\nimport Button from \"Components/Button\";\nimport Image from \"Components/Image\";\nimport Radio from \"Components/Radio\";\nimport Textarea from \"Components/Textarea\";\nimport TextInput from \"Components/TextInput\";\n\nimport { useLanguage, useGlobalState, GlobalActions } from \"Redux/Global\";\n\nimport { removeNonNumeric } from \"Utils/String\";\nimport { isValidLinkedinProfile, isValidEmail } from \"Utils/Validate\";\n\nimport { AllLangs, AllLangsOptions } from \"Assets/Languages\";\n\nimport { Container, Header, FormContainer, ButtonContainer } from \"./style\";\n\ntype AllowedCurrencies = \"USD\" | \"BRL\" | \"EUR\";\ntype ArrayFieldsType = \"skill\" | \"language\";\n\nconst currencyOptions = [\n  {\n    name: \"USD ($)\",\n    value: \"USD\",\n  },\n  {\n    name: \"BRL (R$)\",\n    value: \"BRL\",\n  },\n  {\n    name: \"EUR (€)\",\n    value: \"EUR\",\n  },\n];\n\nconst View: React.FC = () => {\n  const { language } = useGlobalState();\n  const dispatch = useDispatch();\n\n  const FormLanguage = useLanguage<\"Form\">(\"Form\");\n  const ErrorsLanguage = useLanguage<\"Error\">(\"Error\");\n\n  const { register, handleSubmit, setValue, errors } = useForm();\n  const [currency, setCurrency] = useState<AllowedCurrencies>(\"USD\");\n  const [profilePicture, setProfilePicture] = useState<string>(\"\");\n  const [skills, setSkills] = useState<Array<string>>([\"\"]);\n  const [languages, setLanguages] = useState<Array<string>>([\"\"]);\n\n  const onSubmit = useCallback((data: any) => {\n    console.log(data);\n  }, []);\n\n  const formatAge = useCallback(\n    (age: string) => {\n      let formatted = removeNonNumeric(age);\n\n      if (formatted.length > 3) {\n        formatted = formatted.substr(0, 3);\n      }\n\n      setValue(\"age\", formatted);\n    },\n    [setValue],\n  );\n\n  const getLanguagesOptions = useMemo(() => {\n    const allLangsOptions = [];\n\n    for (const lang in AllLangs) {\n      allLangsOptions.push({\n        name: AllLangs[lang as AllLangsOptions],\n        value: lang,\n      });\n    }\n\n    return allLangsOptions;\n  }, []);\n\n  const changeArrayFieldValue = useCallback(\n    (type: ArrayFieldsType, index: number, value: string) => {\n      switch (type) {\n        case \"skill\":\n          const newSkills = skills.slice();\n          newSkills[index] = value;\n          setSkills(newSkills);\n          break;\n        case \"language\":\n          const newLanguages = languages.slice();\n          newLanguages[index] = value;\n          setLanguages(newLanguages);\n          break;\n        default:\n          return;\n      }\n    },\n    [skills, languages],\n  );\n\n  const addArrayField = useCallback(\n    (type: ArrayFieldsType) => {\n      switch (type) {\n        case \"skill\":\n          const newSkills = skills.slice();\n          newSkills.push(\"\");\n          setSkills(newSkills);\n          break;\n        case \"language\":\n          const newLanguage = languages.slice();\n          newLanguage.push(\"\");\n          setLanguages(newLanguage);\n          break;\n        default:\n          return;\n      }\n    },\n    [skills, languages],\n  );\n\n  const removeArrayField = useCallback(\n    (type: ArrayFieldsType, index: number) => {\n      switch (type) {\n        case \"skill\":\n          const newSkills = skills.slice();\n          newSkills.splice(index, 1);\n          setSkills(newSkills);\n          break;\n        case \"language\":\n          const newLanguage = languages.slice();\n          newLanguage.splice(index, 1);\n          setLanguages(newLanguage);\n          break;\n        default:\n          return;\n      }\n    },\n    [languages, skills],\n  );\n\n  return (\n    <Container>\n      <Header>{FormLanguage.reactResumeGenerator}</Header>\n      <FormContainer onSubmit={handleSubmit(onSubmit)}>\n        <Radio\n          label={FormLanguage.language}\n          name=\"language\"\n          value={language}\n          onChange={e =>\n            dispatch(\n              GlobalActions.setLanguage(e.target.value as AllLangsOptions),\n            )\n          }\n          options={getLanguagesOptions}\n        />\n        <Radio\n          label={FormLanguage.currency}\n          name=\"currency\"\n          value={currency}\n          onChange={e => setCurrency(e.target.value as AllowedCurrencies)}\n          options={currencyOptions}\n        />\n        <Image\n          label={FormLanguage.profilePicture}\n          buttonLabel={FormLanguage.uploadFile}\n          buttonEditLabel={FormLanguage.buttonEdit}\n          buttonRemoveLabel={FormLanguage.buttonRemove}\n          buttonSelectLabel={FormLanguage.buttonSelect}\n          value={profilePicture}\n          setValue={setProfilePicture}\n        />\n        <TextInput\n          isRequired\n          label={FormLanguage.name}\n          name=\"name\"\n          innerRef={register({\n            required: true,\n          })}\n          errorMessage={errors.name && ErrorsLanguage.required}\n        />\n        <TextInput\n          isRequired\n          label={FormLanguage.headline}\n          name=\"headline\"\n          innerRef={register({\n            required: true,\n          })}\n          errorMessage={errors.name && ErrorsLanguage.required}\n        />\n        <Textarea\n          isRequired\n          label={FormLanguage.about}\n          name=\"about\"\n          innerRef={register({\n            required: true,\n          })}\n          errorMessage={errors.name && ErrorsLanguage.required}\n        />\n        <TextInput\n          label={FormLanguage.age}\n          name=\"age\"\n          onChange={e => formatAge(e.target.value)}\n          innerRef={register()}\n        />\n        <TextInput\n          label={FormLanguage.phone}\n          name=\"phone\"\n          innerRef={register()}\n        />\n        <TextInput\n          label={FormLanguage.graduation}\n          name=\"gaduation\"\n          innerRef={register()}\n        />\n        <TextInput\n          label=\"Email\"\n          name=\"email\"\n          innerRef={register({\n            validate: value =>\n              isValidEmail(value) || ErrorsLanguage.invalidEmail,\n          })}\n          errorMessage={errors.email && errors.email.message}\n        />\n        <TextInput\n          label=\"Linkedin\"\n          name=\"linkedin\"\n          innerRef={register({\n            validate: value =>\n              isValidLinkedinProfile(value) || ErrorsLanguage.invalidLinkedin,\n          })}\n          errorMessage={errors.linkedin && errors.linkedin.message}\n        />\n        <TextInput\n          label={FormLanguage.salaryExpectation}\n          name=\"salaryExpectation\"\n          onChange={e =>\n            setValue(\"salaryExpectation\", removeNonNumeric(e.target.value))\n          }\n          innerRef={register()}\n        />\n        <ArrayInputs\n          label={FormLanguage.competences}\n          inputs={skills}\n          setValue={(index, value) =>\n            changeArrayFieldValue(\"skill\", index, value)\n          }\n          removeField={index => removeArrayField(\"skill\", index)}\n          addField={() => addArrayField(\"skill\")}\n        />\n        <ArrayInputs\n          label={FormLanguage.languages}\n          inputs={languages}\n          setValue={(index, value) =>\n            changeArrayFieldValue(\"language\", index, value)\n          }\n          removeField={index => removeArrayField(\"language\", index)}\n          addField={() => addArrayField(\"language\")}\n        />\n        <ButtonContainer>\n          <Button aria-label=\"submit\">{FormLanguage.submit}</Button>\n        </ButtonContainer>\n      </FormContainer>\n    </Container>\n  );\n};\n\nexport default View;\n","import styled from \"styled-components\";\n\nimport Colors from \"Assets/Style/Colors\";\nimport { fontBold } from \"Assets/Style/Fonts\";\n\nexport const Container = styled.div`\n  padding: 1em 0;\n  width: 100vw;\n  min-height: 100vh;\n  background-color: ${Colors.background};\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const Header = styled.h1`\n  display: flex;\n  flex-direction: column;\n  margin: 1em 0;\n  ${fontBold};\n  font-size: 3em;\n  text-align: center;\n\n  @media screen and (max-width: 900px) {\n    margin: 0;\n    font-size: 2em;\n    padding: 1em;\n  }\n`;\n\nexport const FormContainer = styled.form`\n  width: 50vw;\n  padding: 1em;\n\n  > h1 {\n    text-align: center;\n    margin-bottom: 2em;\n    text-transform: uppercase;\n  }\n\n  @media screen and (max-width: 900px) {\n    width: 100vw;\n    padding: 0.5em;\n  }\n`;\n\nexport const ButtonContainer = styled.div`\n  display: flex;\n  justify-content: flex-end;\n`;\n","export const fontRegular = \"font-family: MontserratRegular, sans-serif\";\n\nexport const fontRegularItalic =\n  \"font-family: MontserratRegularItalic, sans-serif\";\n\nexport const fontBoldItalic = \"font-family: MontserratBoldItalic, sans-serif\";\n\nexport const fontBold = \"font-family: MontserratBold, sans-serif\";\n"],"sourceRoot":""}